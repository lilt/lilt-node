/**
 * Lilt REST API
 * Lilt REST API Support: https://lilt.atlassian.net/servicedesk/customer/portals    The Lilt REST API enables programmatic access to the full-range of Lilt backend services including:   * Training of and translating with interactive, adaptive machine translation   * Large-scale translation memory   * The Lexicon (a large-scale termbase)   * Programmatic control of the Lilt CAT environment   * Translation memory synchronization  Requests and responses are in JSON format. The REST API only responds to HTTPS / SSL requests.  The base url for this REST API is `https://api.lilt.com/`.  ## Authentication  Requests are authenticated via REST API key, which requires the Business plan.  Requests are authenticated using [HTTP Basic Auth](https://en.wikipedia.org/wiki/Basic_access_authentication). Add your REST API key as both the `username` and `password`.  For development, you may also pass the REST API key via the `key` query parameter. This is less secure than HTTP Basic Auth, and is not recommended for production use.  ## Quotas  Our services have a general quota of 4000 requests per minute. Should you hit the maximum requests per minute, you will need to wait 60 seconds before you can send another request. 
 *
 * The version of the OpenAPI document: v3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.LiltNode);
  }
}(this, function(expect, LiltNode) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new LiltNode.CreateApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('CreateApi', function() {
    describe('deleteLiltCreateContent', function() {
      it('should call deleteLiltCreateContent successfully', function(done) {
        //uncomment below and update the code to test deleteLiltCreateContent
        //instance.deleteLiltCreateContent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('generateLiltCreateContent', function() {
      it('should call generateLiltCreateContent successfully', function(done) {
        //uncomment below and update the code to test generateLiltCreateContent
        //instance.generateLiltCreateContent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getLiltCreateById', function() {
      it('should call getLiltCreateById successfully', function(done) {
        //uncomment below and update the code to test getLiltCreateById
        //instance.getLiltCreateById(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getLiltCreateContent', function() {
      it('should call getLiltCreateContent successfully', function(done) {
        //uncomment below and update the code to test getLiltCreateContent
        //instance.getLiltCreateContent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getLiltCreatePreferences', function() {
      it('should call getLiltCreatePreferences successfully', function(done) {
        //uncomment below and update the code to test getLiltCreatePreferences
        //instance.getLiltCreatePreferences(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('regenerateLiltCreateContent', function() {
      it('should call regenerateLiltCreateContent successfully', function(done) {
        //uncomment below and update the code to test regenerateLiltCreateContent
        //instance.regenerateLiltCreateContent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('signLiltCreateTerms', function() {
      it('should call signLiltCreateTerms successfully', function(done) {
        //uncomment below and update the code to test signLiltCreateTerms
        //instance.signLiltCreateTerms(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateLiltCreateContent', function() {
      it('should call updateLiltCreateContent successfully', function(done) {
        //uncomment below and update the code to test updateLiltCreateContent
        //instance.updateLiltCreateContent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateLiltCreatePreferences', function() {
      it('should call updateLiltCreatePreferences successfully', function(done) {
        //uncomment below and update the code to test updateLiltCreatePreferences
        //instance.updateLiltCreatePreferences(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
