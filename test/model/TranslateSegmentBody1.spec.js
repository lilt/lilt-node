/**
 * Lilt REST API
 * The Lilt REST API enables programmatic access to the full-range of Lilt backend services including:   * Training of and translating with interactive, adaptive machine translation   * Large-scale translation memory   * The Lexicon (a large-scale termbase)   * Programmatic control of the Lilt CAT environment   * Translation memory synchronization  Requests and responses are in JSON format. The REST API only responds to HTTPS / SSL requests.  ## Authentication  Requests are authenticated via REST API key, which requires the Business plan.  Requests are authenticated using [HTTP Basic Auth](https://en.wikipedia.org/wiki/Basic_access_authentication). Add your REST API key as both the `username` and `password`.  For development, you may also pass the REST API key via the `key` query parameter. This is less secure than HTTP Basic Auth, and is not recommended for production use.  ## Quotas  Our services have a general quota of 4000 requests per minute. Should you hit the maximum requests per minute, you will need to wait 60 seconds before you can send another request. 
 *
 * The version of the OpenAPI document: v2.0
 * Contact: support@lilt.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.LiltNode);
  }
}(this, function(expect, LiltNode) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new LiltNode.TranslateSegmentBody1();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('TranslateSegmentBody1', function() {
    it('should create an instance of TranslateSegmentBody1', function() {
      // uncomment below and update the code to test TranslateSegmentBody1
      //var instane = new LiltNode.TranslateSegmentBody1();
      //expect(instance).to.be.a(LiltNode.TranslateSegmentBody1);
    });

    it('should have the property source (base name: "source")', function() {
      // uncomment below and update the code to test the property source
      //var instane = new LiltNode.TranslateSegmentBody1();
      //expect(instance).to.be();
    });

    it('should have the property memoryId (base name: "memory_id")', function() {
      // uncomment below and update the code to test the property memoryId
      //var instane = new LiltNode.TranslateSegmentBody1();
      //expect(instance).to.be();
    });

    it('should have the property sourceHash (base name: "source_hash")', function() {
      // uncomment below and update the code to test the property sourceHash
      //var instane = new LiltNode.TranslateSegmentBody1();
      //expect(instance).to.be();
    });

    it('should have the property n (base name: "n")', function() {
      // uncomment below and update the code to test the property n
      //var instane = new LiltNode.TranslateSegmentBody1();
      //expect(instance).to.be();
    });

    it('should have the property prefix (base name: "prefix")', function() {
      // uncomment below and update the code to test the property prefix
      //var instane = new LiltNode.TranslateSegmentBody1();
      //expect(instance).to.be();
    });

    it('should have the property rich (base name: "rich")', function() {
      // uncomment below and update the code to test the property rich
      //var instane = new LiltNode.TranslateSegmentBody1();
      //expect(instance).to.be();
    });

    it('should have the property tmMatches (base name: "tm_matches")', function() {
      // uncomment below and update the code to test the property tmMatches
      //var instane = new LiltNode.TranslateSegmentBody1();
      //expect(instance).to.be();
    });

    it('should have the property projectTags (base name: "project_tags")', function() {
      // uncomment below and update the code to test the property projectTags
      //var instane = new LiltNode.TranslateSegmentBody1();
      //expect(instance).to.be();
    });

  });

}));
