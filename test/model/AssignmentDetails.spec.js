/**
 * Lilt REST API
 * The Lilt REST API enables programmatic access to the full-range of Lilt backend services including:   * Training of and translating with interactive, adaptive machine translation   * Large-scale translation memory   * The Lexicon (a large-scale termbase)   * Programmatic control of the Lilt CAT environment   * Translation memory synchronization  Requests and responses are in JSON format. The REST API only responds to HTTPS / SSL requests.  ## Authentication  Requests are authenticated via REST API key, which requires the Business plan.  Requests are authenticated using [HTTP Basic Auth](https://en.wikipedia.org/wiki/Basic_access_authentication). Add your REST API key as both the `username` and `password`.  For development, you may also pass the REST API key via the `key` query parameter. This is less secure than HTTP Basic Auth, and is not recommended for production use.  ## Quotas  Our services have a general quota of 4000 requests per minute. Should you hit the maximum requests per minute, you will need to wait 60 seconds before you can send another request. 
 *
 * The version of the OpenAPI document: v2.0
 * Contact: support@lilt.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.LiltNode);
  }
}(this, function(expect, LiltNode) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new LiltNode.AssignmentDetails();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('AssignmentDetails', function() {
    it('should create an instance of AssignmentDetails', function() {
      // uncomment below and update the code to test AssignmentDetails
      //var instane = new LiltNode.AssignmentDetails();
      //expect(instance).to.be.a(LiltNode.AssignmentDetails);
    });

    it('should have the property isPreferredTranslator (base name: "isPreferredTranslator")', function() {
      // uncomment below and update the code to test the property isPreferredTranslator
      //var instane = new LiltNode.AssignmentDetails();
      //expect(instance).to.be();
    });

    it('should have the property wordsLeftAveragedTranslator (base name: "wordsLeftAveragedTranslator")', function() {
      // uncomment below and update the code to test the property wordsLeftAveragedTranslator
      //var instane = new LiltNode.AssignmentDetails();
      //expect(instance).to.be();
    });

    it('should have the property wordsLeftAveragedReviewer (base name: "wordsLeftAveragedReviewer")', function() {
      // uncomment below and update the code to test the property wordsLeftAveragedReviewer
      //var instane = new LiltNode.AssignmentDetails();
      //expect(instance).to.be();
    });

    it('should have the property assignmentErrors (base name: "assignmentErrors")', function() {
      // uncomment below and update the code to test the property assignmentErrors
      //var instane = new LiltNode.AssignmentDetails();
      //expect(instance).to.be();
    });

    it('should have the property docId (base name: "docId")', function() {
      // uncomment below and update the code to test the property docId
      //var instane = new LiltNode.AssignmentDetails();
      //expect(instance).to.be();
    });

    it('should have the property projectId (base name: "projectId")', function() {
      // uncomment below and update the code to test the property projectId
      //var instane = new LiltNode.AssignmentDetails();
      //expect(instance).to.be();
    });

    it('should have the property isAutoAssigned (base name: "isAutoAssigned")', function() {
      // uncomment below and update the code to test the property isAutoAssigned
      //var instane = new LiltNode.AssignmentDetails();
      //expect(instance).to.be();
    });

    it('should have the property translatorUserId (base name: "translatorUserId")', function() {
      // uncomment below and update the code to test the property translatorUserId
      //var instane = new LiltNode.AssignmentDetails();
      //expect(instance).to.be();
    });

    it('should have the property translatorRoleId (base name: "translatorRoleId")', function() {
      // uncomment below and update the code to test the property translatorRoleId
      //var instane = new LiltNode.AssignmentDetails();
      //expect(instance).to.be();
    });

    it('should have the property translatorDueDate (base name: "translatorDueDate")', function() {
      // uncomment below and update the code to test the property translatorDueDate
      //var instane = new LiltNode.AssignmentDetails();
      //expect(instance).to.be();
    });

    it('should have the property reviewerUserId (base name: "reviewerUserId")', function() {
      // uncomment below and update the code to test the property reviewerUserId
      //var instane = new LiltNode.AssignmentDetails();
      //expect(instance).to.be();
    });

  });

}));
