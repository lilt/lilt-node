/**
 * Lilt REST API
 * Lilt REST API Support: https://lilt.atlassian.net/servicedesk/customer/portals    The Lilt REST API enables programmatic access to the full-range of Lilt backend services including:   * Training of and translating with interactive, adaptive machine translation   * Large-scale translation memory   * The Lexicon (a large-scale termbase)   * Programmatic control of the Lilt CAT environment   * Translation memory synchronization  Requests and responses are in JSON format. The REST API only responds to HTTPS / SSL requests.  The base url for this REST API is `https://api.lilt.com/`.  ## Authentication  Requests are authenticated via REST API key, which requires the Business plan.  Requests are authenticated using [HTTP Basic Auth](https://en.wikipedia.org/wiki/Basic_access_authentication). Add your REST API key as both the `username` and `password`.  For development, you may also pass the REST API key via the `key` query parameter. This is less secure than HTTP Basic Auth, and is not recommended for production use.  ## Quotas  Our services have a general quota of 4000 requests per minute. Should you hit the maximum requests per minute, you will need to wait 60 seconds before you can send another request. 
 *
 * The version of the OpenAPI document: v3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DeleteSegmentFromMemoryResponse from '../model/DeleteSegmentFromMemoryResponse';
import Error from '../model/Error';
import Memory from '../model/Memory';
import MemoryCreateParameters from '../model/MemoryCreateParameters';
import MemoryDeleteResponse from '../model/MemoryDeleteResponse';
import MemoryImportResponse from '../model/MemoryImportResponse';
import MemoryUpdateParameters from '../model/MemoryUpdateParameters';
import SDLXLIFFFilter from '../model/SDLXLIFFFilter';
import TermbaseExportResponse from '../model/TermbaseExportResponse';
import TranslationMemoryEntry from '../model/TranslationMemoryEntry';

/**
* Memories service.
* @module api/MemoriesApi
* @version v3.0
*/
export default class MemoriesApi {

    /**
    * Constructs a new MemoriesApi. 
    * @alias module:api/MemoriesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Create a Memory
     * Create a new Memory. A Memory is a container that collects source/target sentences for a specific language pair (e.g., English>French). The data in the Memory is used to train the MT system, populate the TM, and update the lexicon. Memories are private to your account - the data is not shared across users - unless you explicitly share a Memory with your team (via web app only).  <a href=\"https://support.lilt.com/hc/en-us/sections/360012579193-Lilt-Translate-Engine\" target=_blank>Refer to our KB</a> for a more detailed description.  
     * @param {module:model/MemoryCreateParameters} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Memory} and HTTP response
     */
    createMemoryWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createMemory");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'application/octet-stream', 'text/plain'];
      let returnType = Memory;
      return this.apiClient.callApi(
        '/v2/memories', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a Memory
     * Create a new Memory. A Memory is a container that collects source/target sentences for a specific language pair (e.g., English>French). The data in the Memory is used to train the MT system, populate the TM, and update the lexicon. Memories are private to your account - the data is not shared across users - unless you explicitly share a Memory with your team (via web app only).  <a href=\"https://support.lilt.com/hc/en-us/sections/360012579193-Lilt-Translate-Engine\" target=_blank>Refer to our KB</a> for a more detailed description.  
     * @param {module:model/MemoryCreateParameters} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Memory}
     */
    createMemory(body) {
      return this.createMemoryWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a Memory
     * Delete a Memory. 
     * @param {Number} id A unique Memory identifier.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/MemoryDeleteResponse} and HTTP response
     */
    deleteMemoryWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteMemory");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/octet-stream', 'text/plain'];
      let returnType = MemoryDeleteResponse;
      return this.apiClient.callApi(
        '/v2/memories', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a Memory
     * Delete a Memory. 
     * @param {Number} id A unique Memory identifier.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/MemoryDeleteResponse}
     */
    deleteMemory(id) {
      return this.deleteMemoryWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a segment from a memory.
     * Delete a segment from a memory.  ```bash   curl -X DELETE https://api.lilt.com/v2/memories/segment?key=API_KEY&id=ID&segment_id=$SEGMENT_ID ``` 
     * @param {Number} id A unique Memory identifier.
     * @param {Number} segmentId A unique Segment identifier.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DeleteSegmentFromMemoryResponse} and HTTP response
     */
    deleteSegmentFromMemoryWithHttpInfo(id, segmentId) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteSegmentFromMemory");
      }
      // verify the required parameter 'segmentId' is set
      if (segmentId === undefined || segmentId === null) {
        throw new Error("Missing the required parameter 'segmentId' when calling deleteSegmentFromMemory");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id,
        'segment_id': segmentId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/octet-stream', 'text/plain'];
      let returnType = DeleteSegmentFromMemoryResponse;
      return this.apiClient.callApi(
        '/v2/memories/segment', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a segment from a memory.
     * Delete a segment from a memory.  ```bash   curl -X DELETE https://api.lilt.com/v2/memories/segment?key=API_KEY&id=ID&segment_id=$SEGMENT_ID ``` 
     * @param {Number} id A unique Memory identifier.
     * @param {Number} segmentId A unique Segment identifier.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DeleteSegmentFromMemoryResponse}
     */
    deleteSegmentFromMemory(id, segmentId) {
      return this.deleteSegmentFromMemoryWithHttpInfo(id, segmentId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Termbase download for a Memory
     * Downloads the termbase export for the given memory as a CSV file.  Ensure you first call the `/2/memories/termbase/export` endpoint to start the export process before you try to download it.  ```bash   curl -X GET https://api.lilt.com/v2/memories/termbase/download?key=API_KEY&id=ID ``` 
     * @param {Number} id A unique Memory identifier.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Blob} and HTTP response
     */
    downloadTermbaseWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling downloadTermbase");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/octet-stream', 'text/plain'];
      let returnType = 'Blob';
      return this.apiClient.callApi(
        '/v2/memories/termbase/download', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Termbase download for a Memory
     * Downloads the termbase export for the given memory as a CSV file.  Ensure you first call the `/2/memories/termbase/export` endpoint to start the export process before you try to download it.  ```bash   curl -X GET https://api.lilt.com/v2/memories/termbase/download?key=API_KEY&id=ID ``` 
     * @param {Number} id A unique Memory identifier.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Blob}
     */
    downloadTermbase(id) {
      return this.downloadTermbaseWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Termbase export for a Memory
     * Exports the termbase entries for the given memory into a CSV file.  Calling this endpoint will begin the export process in the background. Check that the processing is complete by polling the `GET /2/memories` endpoint. When the `is_processing` value is 0 then call the `POST /2/memories/termbase/download` endpoint.  ```bash   curl -X POST https://api.lilt.com/v2/memories/termbase/export?key=API_KEY&id=ID ``` 
     * @param {Number} id A unique Memory identifier.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TermbaseExportResponse} and HTTP response
     */
    exportTermbaseWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling exportTermbase");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/octet-stream', 'text/plain'];
      let returnType = TermbaseExportResponse;
      return this.apiClient.callApi(
        '/v2/memories/termbase/export', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Termbase export for a Memory
     * Exports the termbase entries for the given memory into a CSV file.  Calling this endpoint will begin the export process in the background. Check that the processing is complete by polling the `GET /2/memories` endpoint. When the `is_processing` value is 0 then call the `POST /2/memories/termbase/download` endpoint.  ```bash   curl -X POST https://api.lilt.com/v2/memories/termbase/export?key=API_KEY&id=ID ``` 
     * @param {Number} id A unique Memory identifier.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TermbaseExportResponse}
     */
    exportTermbase(id) {
      return this.exportTermbaseWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve a Memory
     * Retrieve a Memory. If you cannot access the Memory (401 error) please check permissions (e.g. in case you created the Memory via the web app with a different account you may have to explicitly share that Memory).  
     * @param {Object} opts Optional parameters
     * @param {Number} opts.id An optional Memory identifier.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/Memory>} and HTTP response
     */
    getMemoryWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/octet-stream', 'text/plain'];
      let returnType = [Memory];
      return this.apiClient.callApi(
        '/v2/memories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve a Memory
     * Retrieve a Memory. If you cannot access the Memory (401 error) please check permissions (e.g. in case you created the Memory via the web app with a different account you may have to explicitly share that Memory).  
     * @param {Object} opts Optional parameters
     * @param {Number} opts.id An optional Memory identifier.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/Memory>}
     */
    getMemory(opts) {
      return this.getMemoryWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * File import for a Memory
     * Imports common translation memory or termbase file formats to a specific Lilt memory. Currently supported file formats are `*.tmx`, `*.sdltm`, `*.sdlxliff`(With custom Filters), '*.xliff', and `*.tmq` for TM data; `*.csv` and `*.tbx` for termbase data. Request parameters should be passed as JSON object with the header field `LILT-API`.  Example CURL command to upload a translation memory file named `my_memory.sdltm` in the current working directory: ```bash   curl -X POST https://api.lilt.com/v2/memories/import?key=API_KEY \\     --header \"LILT-API: {\\\"name\\\": \\\"my_memory.sdltm\\\",\\\"memory_id\\\": 42}\" \\     --header \"Content-Type: application/octet-stream\" \\     --data-binary @my_memory.sdltm ```  Example CURL command to upload a translation memory file named `my_memory.sdlxliff` in the current working directory, with Custom Filters based on SDLXLIFF fields, conf_name which maps to, percentage, and whether we should ignore unlocked segments. ```bash   curl -X POST https://api.lilt.com/v2/memories/import?key=API_KEY \\     --header \"LILT-API: {\\\"name\\\": \\\"my_memory.sdlxliff\\\",\\\"memory_id\\\": 12,\\\"sdlxliff_filters\\\":[{\\\"conf_name\\\": \\\"Translated\\\", \\\"percentage\\\": 100, \\\"allow_unlocked\\\": false}]\"}\" \\     --header \"Content-Type: application/octet-stream\" \\     --data-binary @my_memory.sdlxliff ```  
     * @param {Number} memoryId A unique Memory identifier.
     * @param {String} name Name of the TM or termbase file.
     * @param {File} body The file contents to be uploaded. The entire POST body will be treated as the file.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/SDLXLIFFFilter>} opts.sdlxliffFilters Contains Filter information Unique to SDLXLIFF
     * @param {Boolean} opts.hasHeaderRow A flag indicating whether an imported Termbase CSV has a header row or not (the default value is `false`).
     * @param {Boolean} opts.skipDuplicates A flag indicating whether or not to skip the import of segments which already exist in the memory. (the default value is `false`). 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/MemoryImportResponse} and HTTP response
     */
    importMemoryFileWithHttpInfo(memoryId, name, body, opts) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'memoryId' is set
      if (memoryId === undefined || memoryId === null) {
        throw new Error("Missing the required parameter 'memoryId' when calling importMemoryFile");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling importMemoryFile");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling importMemoryFile");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'memory_id': memoryId,
        'name': name,
        'sdlxliff_filters': opts['sdlxliffFilters'],
        'has_header_row': opts['hasHeaderRow'],
        'skip_duplicates': opts['skipDuplicates']
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth'];
      let contentTypes = ['application/octet-stream'];
      let accepts = ['application/json', 'application/octet-stream', 'text/plain'];
      let returnType = MemoryImportResponse;
      return this.apiClient.callApi(
        '/v2/memories/import', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * File import for a Memory
     * Imports common translation memory or termbase file formats to a specific Lilt memory. Currently supported file formats are `*.tmx`, `*.sdltm`, `*.sdlxliff`(With custom Filters), '*.xliff', and `*.tmq` for TM data; `*.csv` and `*.tbx` for termbase data. Request parameters should be passed as JSON object with the header field `LILT-API`.  Example CURL command to upload a translation memory file named `my_memory.sdltm` in the current working directory: ```bash   curl -X POST https://api.lilt.com/v2/memories/import?key=API_KEY \\     --header \"LILT-API: {\\\"name\\\": \\\"my_memory.sdltm\\\",\\\"memory_id\\\": 42}\" \\     --header \"Content-Type: application/octet-stream\" \\     --data-binary @my_memory.sdltm ```  Example CURL command to upload a translation memory file named `my_memory.sdlxliff` in the current working directory, with Custom Filters based on SDLXLIFF fields, conf_name which maps to, percentage, and whether we should ignore unlocked segments. ```bash   curl -X POST https://api.lilt.com/v2/memories/import?key=API_KEY \\     --header \"LILT-API: {\\\"name\\\": \\\"my_memory.sdlxliff\\\",\\\"memory_id\\\": 12,\\\"sdlxliff_filters\\\":[{\\\"conf_name\\\": \\\"Translated\\\", \\\"percentage\\\": 100, \\\"allow_unlocked\\\": false}]\"}\" \\     --header \"Content-Type: application/octet-stream\" \\     --data-binary @my_memory.sdlxliff ```  
     * @param {Number} memoryId A unique Memory identifier.
     * @param {String} name Name of the TM or termbase file.
     * @param {File} body The file contents to be uploaded. The entire POST body will be treated as the file.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/SDLXLIFFFilter>} opts.sdlxliffFilters Contains Filter information Unique to SDLXLIFF
     * @param {Boolean} opts.hasHeaderRow A flag indicating whether an imported Termbase CSV has a header row or not (the default value is `false`).
     * @param {Boolean} opts.skipDuplicates A flag indicating whether or not to skip the import of segments which already exist in the memory. (the default value is `false`). 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/MemoryImportResponse}
     */
    importMemoryFile(memoryId, name, body, opts) {
      return this.importMemoryFileWithHttpInfo(memoryId, name, body, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Query a Memory
     * Perform a translation memory query. 
     * @param {Number} id A unique Memory identifier.
     * @param {String} query A source query.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.n Maximum number of results to return. (default to 10)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/TranslationMemoryEntry>} and HTTP response
     */
    queryMemoryWithHttpInfo(id, query, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling queryMemory");
      }
      // verify the required parameter 'query' is set
      if (query === undefined || query === null) {
        throw new Error("Missing the required parameter 'query' when calling queryMemory");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id,
        'query': query,
        'n': opts['n']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/octet-stream', 'text/plain'];
      let returnType = [TranslationMemoryEntry];
      return this.apiClient.callApi(
        '/v2/memories/query', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Query a Memory
     * Perform a translation memory query. 
     * @param {Number} id A unique Memory identifier.
     * @param {String} query A source query.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.n Maximum number of results to return. (default to 10)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/TranslationMemoryEntry>}
     */
    queryMemory(id, query, opts) {
      return this.queryMemoryWithHttpInfo(id, query, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update the name of a Memory
     * Update a Memory. 
     * @param {module:model/MemoryUpdateParameters} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Memory} and HTTP response
     */
    updateMemoryWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateMemory");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'application/octet-stream', 'text/plain'];
      let returnType = Memory;
      return this.apiClient.callApi(
        '/v2/memories', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update the name of a Memory
     * Update a Memory. 
     * @param {module:model/MemoryUpdateParameters} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Memory}
     */
    updateMemory(body) {
      return this.updateMemoryWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
