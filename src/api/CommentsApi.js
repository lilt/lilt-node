/**
 * Lilt REST API
 * The Lilt REST API enables programmatic access to the full-range of Lilt backend services including:   * Training of and translating with interactive, adaptive machine translation   * Large-scale translation memory   * The Lexicon (a large-scale termbase)   * Programmatic control of the Lilt CAT environment   * Translation memory synchronization  Requests and responses are in JSON format. The REST API only responds to HTTPS / SSL requests.  ## Authentication  Requests are authenticated via REST API key, which requires the Business plan.  Requests are authenticated using [HTTP Basic Auth](https://en.wikipedia.org/wiki/Basic_access_authentication). Add your REST API key as both the `username` and `password`.  For development, you may also pass the REST API key via the `key` query parameter. This is less secure than HTTP Basic Auth, and is not recommended for production use.  ## Quotas  Our services have a general quota of 4000 requests per minute. Should you hit the maximum requests per minute, you will need to wait 60 seconds before you can send another request. 
 *
 * The version of the OpenAPI document: v2.0
 * Contact: support@lilt.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Comment from '../model/Comment';
import CommentBody from '../model/CommentBody';
import CommentDeleteResponse from '../model/CommentDeleteResponse';
import DocumentComments from '../model/DocumentComments';
import Error from '../model/Error';

/**
* Comments service.
* @module api/CommentsApi
* @version 0.5.0
*/
export default class CommentsApi {

    /**
    * Constructs a new CommentsApi. 
    * @alias module:api/CommentsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Create a new comment
     * Create a new comment for the specified Segment ID.
     * @param {Number} documentId A unique document identifier.
     * @param {Number} segmentId A unique segment identifier.
     * @param {module:model/CommentBody} body The comment being created
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Comment} and HTTP response
     */
    createCommentWithHttpInfo(documentId, segmentId, body) {
      let postBody = body;
      // verify the required parameter 'documentId' is set
      if (documentId === undefined || documentId === null) {
        throw new Error("Missing the required parameter 'documentId' when calling createComment");
      }
      // verify the required parameter 'segmentId' is set
      if (segmentId === undefined || segmentId === null) {
        throw new Error("Missing the required parameter 'segmentId' when calling createComment");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createComment");
      }

      let pathParams = {
      };
      let queryParams = {
        'document_id': documentId,
        'segment_id': segmentId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Comment;
      return this.apiClient.callApi(
        '/comments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a new comment
     * Create a new comment for the specified Segment ID.
     * @param {Number} documentId A unique document identifier.
     * @param {Number} segmentId A unique segment identifier.
     * @param {module:model/CommentBody} body The comment being created
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Comment}
     */
    createComment(documentId, segmentId, body) {
      return this.createCommentWithHttpInfo(documentId, segmentId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a Comment
     * Delete a Comment.  Example CURL command: ```   curl -X DELETE https://lilt.com/2/comments?key=API_KEY&comment_id=123 ``` 
     * @param {Number} commentId A unique Comment identifier.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CommentDeleteResponse} and HTTP response
     */
    deleteCommentWithHttpInfo(commentId) {
      let postBody = null;
      // verify the required parameter 'commentId' is set
      if (commentId === undefined || commentId === null) {
        throw new Error("Missing the required parameter 'commentId' when calling deleteComment");
      }

      let pathParams = {
      };
      let queryParams = {
        'comment_id': commentId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CommentDeleteResponse;
      return this.apiClient.callApi(
        '/comments', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a Comment
     * Delete a Comment.  Example CURL command: ```   curl -X DELETE https://lilt.com/2/comments?key=API_KEY&comment_id=123 ``` 
     * @param {Number} commentId A unique Comment identifier.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CommentDeleteResponse}
     */
    deleteComment(commentId) {
      return this.deleteCommentWithHttpInfo(commentId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve a document's comments by segment
     * Retrieves all comments associated with a specified document, grouped by their Segment's ID.  To retrieve a document's comments, specify the <strong>document_id</strong> request parameter.  Example CURL command: ```   curl -X GET https://lilt.com/2/comments?key=API_KEY&document_id=123 ``` 
     * @param {Number} documentId A unique document identifier.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DocumentComments} and HTTP response
     */
    getDocumentCommentsWithHttpInfo(documentId) {
      let postBody = null;
      // verify the required parameter 'documentId' is set
      if (documentId === undefined || documentId === null) {
        throw new Error("Missing the required parameter 'documentId' when calling getDocumentComments");
      }

      let pathParams = {
      };
      let queryParams = {
        'document_id': documentId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DocumentComments;
      return this.apiClient.callApi(
        '/comments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve a document's comments by segment
     * Retrieves all comments associated with a specified document, grouped by their Segment's ID.  To retrieve a document's comments, specify the <strong>document_id</strong> request parameter.  Example CURL command: ```   curl -X GET https://lilt.com/2/comments?key=API_KEY&document_id=123 ``` 
     * @param {Number} documentId A unique document identifier.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DocumentComments}
     */
    getDocumentComments(documentId) {
      return this.getDocumentCommentsWithHttpInfo(documentId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update an existing comment
     * Update an existing comment.
     * @param {Number} commentId A unique comment identifier.
     * @param {Number} documentId A unique document identifier.
     * @param {module:model/CommentBody} body The comment being updated.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Comment} and HTTP response
     */
    updateCommentWithHttpInfo(commentId, documentId, body) {
      let postBody = body;
      // verify the required parameter 'commentId' is set
      if (commentId === undefined || commentId === null) {
        throw new Error("Missing the required parameter 'commentId' when calling updateComment");
      }
      // verify the required parameter 'documentId' is set
      if (documentId === undefined || documentId === null) {
        throw new Error("Missing the required parameter 'documentId' when calling updateComment");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateComment");
      }

      let pathParams = {
      };
      let queryParams = {
        'comment_id': commentId,
        'document_id': documentId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Comment;
      return this.apiClient.callApi(
        '/comments', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update an existing comment
     * Update an existing comment.
     * @param {Number} commentId A unique comment identifier.
     * @param {Number} documentId A unique document identifier.
     * @param {module:model/CommentBody} body The comment being updated.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Comment}
     */
    updateComment(commentId, documentId, body) {
      return this.updateCommentWithHttpInfo(commentId, documentId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
