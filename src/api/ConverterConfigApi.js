/**
 * Lilt REST API
 * The Lilt REST API enables programmatic access to the full-range of Lilt backend services including:   * Training of and translating with interactive, adaptive machine translation   * Large-scale translation memory   * The Lexicon (a large-scale termbase)   * Programmatic control of the Lilt CAT environment   * Translation memory synchronization  Requests and responses are in JSON format. The REST API only responds to HTTPS / SSL requests.  ## Authentication  Requests are authenticated via REST API key, which requires the Business plan.  Requests are authenticated using [HTTP Basic Auth](https://en.wikipedia.org/wiki/Basic_access_authentication). Add your REST API key as both the `username` and `password`.  For development, you may also pass the REST API key via the `key` query parameter. This is less secure than HTTP Basic Auth, and is not recommended for production use.  ## Quotas  Our services have a general quota of 4000 requests per minute. Should you hit the maximum requests per minute, you will need to wait 60 seconds before you can send another request. 
 *
 * The version of the OpenAPI document: v2.0
 * Contact: support@lilt.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ConverterConfigUpdateResponse from '../model/ConverterConfigUpdateResponse';
import CreateConverterConfigParameters from '../model/CreateConverterConfigParameters';
import EditFilterMappingParameters from '../model/EditFilterMappingParameters';
import Error from '../model/Error';

/**
* ConverterConfig service.
* @module api/ConverterConfigApi
* @version 0.5.0
*/
export default class ConverterConfigApi {

    /**
    * Constructs a new ConverterConfigApi. 
    * @alias module:api/ConverterConfigApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Add Converter Config
     * Add a file filter configuration for your Organization. 
     * @param {Number} organizationId A unique Organization identifier.
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateConverterConfigParameters} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ConverterConfigUpdateResponse} and HTTP response
     */
    addConverterConfigWithHttpInfo(organizationId, opts) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling addConverterConfig");
      }

      let pathParams = {
      };
      let queryParams = {
        'organizationId': organizationId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ConverterConfigUpdateResponse;
      return this.apiClient.callApi(
        '/configs/converter', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Add Converter Config
     * Add a file filter configuration for your Organization. 
     * @param {Number} organizationId A unique Organization identifier.
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateConverterConfigParameters} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ConverterConfigUpdateResponse}
     */
    addConverterConfig(organizationId, opts) {
      return this.addConverterConfigWithHttpInfo(organizationId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete Converter Config
     * Delete a file filter configuration by id. 
     * @param {Number} configId A unique configuration identifier.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ConverterConfigUpdateResponse} and HTTP response
     */
    deleteConverterConfigWithHttpInfo(configId) {
      let postBody = null;
      // verify the required parameter 'configId' is set
      if (configId === undefined || configId === null) {
        throw new Error("Missing the required parameter 'configId' when calling deleteConverterConfig");
      }

      let pathParams = {
        'configId': configId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ConverterConfigUpdateResponse;
      return this.apiClient.callApi(
        '/configs/converter/{configId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete Converter Config
     * Delete a file filter configuration by id. 
     * @param {Number} configId A unique configuration identifier.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ConverterConfigUpdateResponse}
     */
    deleteConverterConfig(configId) {
      return this.deleteConverterConfigWithHttpInfo(configId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete Filter Mapping
     * Delete a file filter mapping by id and file extension. 
     * @param {Number} configId A unique configuration identifier.
     * @param {String} fileExtension A file extension to delete.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object.<String, {String: String}>} and HTTP response
     */
    deleteFilterMappingWithHttpInfo(configId, fileExtension) {
      let postBody = null;
      // verify the required parameter 'configId' is set
      if (configId === undefined || configId === null) {
        throw new Error("Missing the required parameter 'configId' when calling deleteFilterMapping");
      }
      // verify the required parameter 'fileExtension' is set
      if (fileExtension === undefined || fileExtension === null) {
        throw new Error("Missing the required parameter 'fileExtension' when calling deleteFilterMapping");
      }

      let pathParams = {
        'configId': configId,
        'fileExtension': fileExtension
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': 'String'};
      return this.apiClient.callApi(
        '/configs/converter/{configId}/{fileExtension}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete Filter Mapping
     * Delete a file filter mapping by id and file extension. 
     * @param {Number} configId A unique configuration identifier.
     * @param {String} fileExtension A file extension to delete.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object.<String, {String: String}>}
     */
    deleteFilterMapping(configId, fileExtension) {
      return this.deleteFilterMappingWithHttpInfo(configId, fileExtension)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Add Filter Mapping
     * Add a specific filter mapping to your file filter configuration 
     * @param {Number} configId A unique configuration identifier.
     * @param {String} fileExtension A file extension for the filter mapping.
     * @param {Object} opts Optional parameters
     * @param {module:model/EditFilterMappingParameters} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object.<String, {String: String}>} and HTTP response
     */
    editFilterMappingWithHttpInfo(configId, fileExtension, opts) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'configId' is set
      if (configId === undefined || configId === null) {
        throw new Error("Missing the required parameter 'configId' when calling editFilterMapping");
      }
      // verify the required parameter 'fileExtension' is set
      if (fileExtension === undefined || fileExtension === null) {
        throw new Error("Missing the required parameter 'fileExtension' when calling editFilterMapping");
      }

      let pathParams = {
        'configId': configId,
        'fileExtension': fileExtension
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = {'String': 'String'};
      return this.apiClient.callApi(
        '/configs/converter/{configId}/{fileExtension}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Add Filter Mapping
     * Add a specific filter mapping to your file filter configuration 
     * @param {Number} configId A unique configuration identifier.
     * @param {String} fileExtension A file extension for the filter mapping.
     * @param {Object} opts Optional parameters
     * @param {module:model/EditFilterMappingParameters} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object.<String, {String: String}>}
     */
    editFilterMapping(configId, fileExtension, opts) {
      return this.editFilterMappingWithHttpInfo(configId, fileExtension, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Fetch Converter Config by Id
     * Fetch a file filter configuration by id. 
     * @param {Number} configId A unique configuration identifier.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object.<String, {String: String}>} and HTTP response
     */
    getConverterConfigByIdWithHttpInfo(configId) {
      let postBody = null;
      // verify the required parameter 'configId' is set
      if (configId === undefined || configId === null) {
        throw new Error("Missing the required parameter 'configId' when calling getConverterConfigById");
      }

      let pathParams = {
        'configId': configId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': 'String'};
      return this.apiClient.callApi(
        '/configs/converter/{configId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Fetch Converter Config by Id
     * Fetch a file filter configuration by id. 
     * @param {Number} configId A unique configuration identifier.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object.<String, {String: String}>}
     */
    getConverterConfigById(configId) {
      return this.getConverterConfigByIdWithHttpInfo(configId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Converter Configs
     * List all file filter configurations for your Organization. 
     * @param {Number} organizationId A unique Organization identifier.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object.<String, {String: String}>} and HTTP response
     */
    getConverterConfigsWithHttpInfo(organizationId) {
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getConverterConfigs");
      }

      let pathParams = {
      };
      let queryParams = {
        'organizationId': organizationId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': 'String'};
      return this.apiClient.callApi(
        '/configs/converter', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List Converter Configs
     * List all file filter configurations for your Organization. 
     * @param {Number} organizationId A unique Organization identifier.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object.<String, {String: String}>}
     */
    getConverterConfigs(organizationId) {
      return this.getConverterConfigsWithHttpInfo(organizationId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
