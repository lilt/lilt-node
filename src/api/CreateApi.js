/**
 * Lilt REST API
 * Lilt REST API Support: https://lilt.atlassian.net/servicedesk/customer/portals    The Lilt REST API enables programmatic access to the full-range of Lilt backend services including:   * Training of and translating with interactive, adaptive machine translation   * Large-scale translation memory   * The Lexicon (a large-scale termbase)   * Programmatic control of the Lilt CAT environment   * Translation memory synchronization  Requests and responses are in JSON format. The REST API only responds to HTTPS / SSL requests.  The base url for this REST API is `https://api.lilt.com/`.  ## Authentication  Requests are authenticated via REST API key, which requires the Business plan.  Requests are authenticated using [HTTP Basic Auth](https://en.wikipedia.org/wiki/Basic_access_authentication). Add your REST API key as both the `username` and `password`.  For development, you may also pass the REST API key via the `key` query parameter. This is less secure than HTTP Basic Auth, and is not recommended for production use.  ## Quotas  Our services have a general quota of 4000 requests per minute. Should you hit the maximum requests per minute, you will need to wait 60 seconds before you can send another request. 
 *
 * The version of the OpenAPI document: v3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateConverterConfigParameters from '../model/CreateConverterConfigParameters';
import GetLiltCreateContentResponse from '../model/GetLiltCreateContentResponse';
import InlineResponse200 from '../model/InlineResponse200';
import LiltCreateContent from '../model/LiltCreateContent';
import SignLiltCreateTermsResponse from '../model/SignLiltCreateTermsResponse';

/**
* Create service.
* @module api/CreateApi
* @version 0.6.3
*/
export default class CreateApi {

    /**
    * Constructs a new CreateApi. 
    * @alias module:api/CreateApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Delete Lilt Create content
     * Delete a piece of Lilt Create content.  Example CURL: ``` curl --X --request DELETE 'https://api.lilt.com/v2/create/1234?key=API_KEY' ```  
     * @param {Number} contentId The content ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse200} and HTTP response
     */
    deleteLiltCreateContentWithHttpInfo(contentId) {
      let postBody = null;
      // verify the required parameter 'contentId' is set
      if (contentId === undefined || contentId === null) {
        throw new Error("Missing the required parameter 'contentId' when calling deleteLiltCreateContent");
      }

      let pathParams = {
        'contentId': contentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200;
      return this.apiClient.callApi(
        '/v2/create/{contentId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete Lilt Create content
     * Delete a piece of Lilt Create content.  Example CURL: ``` curl --X --request DELETE 'https://api.lilt.com/v2/create/1234?key=API_KEY' ```  
     * @param {Number} contentId The content ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse200}
     */
    deleteLiltCreateContent(contentId) {
      return this.deleteLiltCreateContentWithHttpInfo(contentId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Generate new Lilt Create content
     * Generate new Lilt Create content with the given parameters.  Example CURL: ``` curl --X --request POST 'https://api.lilt.com/v2/create?key=API_KEY' \\ --header 'Content-Type: application/json' \\ --data-raw '{   \"language\":\"en-US\",   \"template\":\"blog-post\",   \"templateParams\":{     \"contentLength\":\"100\",     \"language\":\"en-US\",     \"sections\":[],     \"summary\":\"a blog post about hiking\"     },   \"preferences\":{\"tone\":\"formal\",\"styleguide\":\"\"} }' ```  
     * @param {module:model/LiltCreateContent} templateParams Input parameters that determine what content will be generated. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    generateLiltCreateContentWithHttpInfo(templateParams) {
      let postBody = templateParams;
      // verify the required parameter 'templateParams' is set
      if (templateParams === undefined || templateParams === null) {
        throw new Error("Missing the required parameter 'templateParams' when calling generateLiltCreateContent");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Generate new Lilt Create content
     * Generate new Lilt Create content with the given parameters.  Example CURL: ``` curl --X --request POST 'https://api.lilt.com/v2/create?key=API_KEY' \\ --header 'Content-Type: application/json' \\ --data-raw '{   \"language\":\"en-US\",   \"template\":\"blog-post\",   \"templateParams\":{     \"contentLength\":\"100\",     \"language\":\"en-US\",     \"sections\":[],     \"summary\":\"a blog post about hiking\"     },   \"preferences\":{\"tone\":\"formal\",\"styleguide\":\"\"} }' ```  
     * @param {module:model/LiltCreateContent} templateParams Input parameters that determine what content will be generated. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    generateLiltCreateContent(templateParams) {
      return this.generateLiltCreateContentWithHttpInfo(templateParams)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Lilt Create content by ID.
     * Get Lilt Create content by ID.  Example CURL: ``` curl --X --request GET 'https://api.lilt.com/v2/create/1234?key=API_KEY' ```  
     * @param {Number} contentId The content ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LiltCreateContent} and HTTP response
     */
    getLiltCreateByIdWithHttpInfo(contentId) {
      let postBody = null;
      // verify the required parameter 'contentId' is set
      if (contentId === undefined || contentId === null) {
        throw new Error("Missing the required parameter 'contentId' when calling getLiltCreateById");
      }

      let pathParams = {
        'contentId': contentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LiltCreateContent;
      return this.apiClient.callApi(
        '/v2/create/{contentId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Lilt Create content by ID.
     * Get Lilt Create content by ID.  Example CURL: ``` curl --X --request GET 'https://api.lilt.com/v2/create/1234?key=API_KEY' ```  
     * @param {Number} contentId The content ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LiltCreateContent}
     */
    getLiltCreateById(contentId) {
      return this.getLiltCreateByIdWithHttpInfo(contentId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Lilt Create content
     * Get a list of all content that has been generated by Lilt Create.  Example CURL: ``` curl --X --request GET 'https://api.lilt.com/v2/create?key=API_KEY' ```  
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetLiltCreateContentResponse} and HTTP response
     */
    getLiltCreateContentWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetLiltCreateContentResponse;
      return this.apiClient.callApi(
        '/v2/create', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Lilt Create content
     * Get a list of all content that has been generated by Lilt Create.  Example CURL: ``` curl --X --request GET 'https://api.lilt.com/v2/create?key=API_KEY' ```  
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetLiltCreateContentResponse}
     */
    getLiltCreateContent() {
      return this.getLiltCreateContentWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Lilt Create preferences
     * Get the stored preferences for Lilt Create.  Example CURL: ``` curl --X --request POST 'https://api.lilt.com/v2/create/preferences?key=API_KEY' ```  
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    getLiltCreatePreferencesWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/create/preferences', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Lilt Create preferences
     * Get the stored preferences for Lilt Create.  Example CURL: ``` curl --X --request POST 'https://api.lilt.com/v2/create/preferences?key=API_KEY' ```  
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    getLiltCreatePreferences() {
      return this.getLiltCreatePreferencesWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Regenerate Lilt Create content
     * Regenerate the given piece of content with the current parameters.  Example CURL: ``` curl --X --request GET 'https://api.lilt.com/v2/create/1234/create?key=API_KEY' ```  
     * @param {Number} contentId The content ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    regenerateLiltCreateContentWithHttpInfo(contentId) {
      let postBody = null;
      // verify the required parameter 'contentId' is set
      if (contentId === undefined || contentId === null) {
        throw new Error("Missing the required parameter 'contentId' when calling regenerateLiltCreateContent");
      }

      let pathParams = {
        'contentId': contentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/create/{contentId}/create', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Regenerate Lilt Create content
     * Regenerate the given piece of content with the current parameters.  Example CURL: ``` curl --X --request GET 'https://api.lilt.com/v2/create/1234/create?key=API_KEY' ```  
     * @param {Number} contentId The content ID.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    regenerateLiltCreateContent(contentId) {
      return this.regenerateLiltCreateContentWithHttpInfo(contentId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Sign the Lilt Create terms and conditions
     * Lilt Create requires that the terms and conditions are signed first before using it. The terms and conditions can be signed by using this endpoint.  Example CURL: ``` curl --X --request POST 'https://api.lilt.com/v2/create/terms-and-conditions?key=API_KEY' \\ --header 'Content-Type: application/json' \\ --data-raw '{\"signedAgreement\": true}' ```  
     * @param {module:model/CreateConverterConfigParameters} signedAgreement 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SignLiltCreateTermsResponse} and HTTP response
     */
    signLiltCreateTermsWithHttpInfo(signedAgreement) {
      let postBody = signedAgreement;
      // verify the required parameter 'signedAgreement' is set
      if (signedAgreement === undefined || signedAgreement === null) {
        throw new Error("Missing the required parameter 'signedAgreement' when calling signLiltCreateTerms");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SignLiltCreateTermsResponse;
      return this.apiClient.callApi(
        '/v2/create/terms-and-conditions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Sign the Lilt Create terms and conditions
     * Lilt Create requires that the terms and conditions are signed first before using it. The terms and conditions can be signed by using this endpoint.  Example CURL: ``` curl --X --request POST 'https://api.lilt.com/v2/create/terms-and-conditions?key=API_KEY' \\ --header 'Content-Type: application/json' \\ --data-raw '{\"signedAgreement\": true}' ```  
     * @param {module:model/CreateConverterConfigParameters} signedAgreement 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SignLiltCreateTermsResponse}
     */
    signLiltCreateTerms(signedAgreement) {
      return this.signLiltCreateTermsWithHttpInfo(signedAgreement)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update Lilt Create content
     * Update a piece of Lilt Create content.  Example CURL: ``` curl --X --request PUT 'https://api.lilt.com/v2/create/1234?key=API_KEY' \\ --header 'Content-Type: application/json' \\ --data-raw '{\"language\":\"de-DE\"}' ```  
     * @param {Number} contentId The content ID.
     * @param {Object} opts Optional parameters
     * @param {module:model/LiltCreateContent} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LiltCreateContent} and HTTP response
     */
    updateLiltCreateContentWithHttpInfo(contentId, opts) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'contentId' is set
      if (contentId === undefined || contentId === null) {
        throw new Error("Missing the required parameter 'contentId' when calling updateLiltCreateContent");
      }

      let pathParams = {
        'contentId': contentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LiltCreateContent;
      return this.apiClient.callApi(
        '/v2/create/{contentId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update Lilt Create content
     * Update a piece of Lilt Create content.  Example CURL: ``` curl --X --request PUT 'https://api.lilt.com/v2/create/1234?key=API_KEY' \\ --header 'Content-Type: application/json' \\ --data-raw '{\"language\":\"de-DE\"}' ```  
     * @param {Number} contentId The content ID.
     * @param {Object} opts Optional parameters
     * @param {module:model/LiltCreateContent} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LiltCreateContent}
     */
    updateLiltCreateContent(contentId, opts) {
      return this.updateLiltCreateContentWithHttpInfo(contentId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update Lilt Create preferences
     * Update the stored preferences for Lilt Create.  Example CURL: ``` curl --X --request PUT 'https://api.lilt.com/v2/create/preferences?key=API_KEY' \\ --header 'Content-Type: application/json' \\ --data-raw '{\"tone\": \"formal\", \"styleguide\": \"\"}' ```  
     * @param {Object} opts Optional parameters
     * @param {module:model/LiltCreateContent} opts.styleguide Which styleguide to use.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    updateLiltCreatePreferencesWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['styleguide'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/create/preferences', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update Lilt Create preferences
     * Update the stored preferences for Lilt Create.  Example CURL: ``` curl --X --request PUT 'https://api.lilt.com/v2/create/preferences?key=API_KEY' \\ --header 'Content-Type: application/json' \\ --data-raw '{\"tone\": \"formal\", \"styleguide\": \"\"}' ```  
     * @param {Object} opts Optional parameters
     * @param {module:model/LiltCreateContent} opts.styleguide Which styleguide to use.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    updateLiltCreatePreferences(opts) {
      return this.updateLiltCreatePreferencesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
