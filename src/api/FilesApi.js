/**
 * Lilt REST API
 * Lilt REST API Support: https://lilt.atlassian.net/servicedesk/customer/portals    The Lilt REST API enables programmatic access to the full-range of Lilt backend services including:   * Training of and translating with interactive, adaptive machine translation   * Large-scale translation memory   * The Lexicon (a large-scale termbase)   * Programmatic control of the Lilt CAT environment   * Translation memory synchronization  Requests and responses are in JSON format. The REST API only responds to HTTPS / SSL requests.  The base url for this REST API is `https://api.lilt.com/`.  ## Authentication  Requests are authenticated via REST API key, which requires the Business plan.  Requests are authenticated using [HTTP Basic Auth](https://en.wikipedia.org/wiki/Basic_access_authentication). Add your REST API key as both the `username` and `password`.  For development, you may also pass the REST API key via the `key` query parameter. This is less secure than HTTP Basic Auth, and is not recommended for production use.  ## Quotas  Our services have a general quota of 4000 requests per minute. Should you hit the maximum requests per minute, you will need to wait 60 seconds before you can send another request. 
 *
 * The version of the OpenAPI document: v3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AddFileLabelRequest from '../model/AddFileLabelRequest';
import Error from '../model/Error';
import FileDeleteResponse from '../model/FileDeleteResponse';
import SourceFile from '../model/SourceFile';

/**
* Files service.
* @module api/FilesApi
* @version v3.0
*/
export default class FilesApi {

    /**
    * Constructs a new FilesApi. 
    * @alias module:api/FilesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Add Label to File
     * Add a label to a File.  Example CURL: ```bash curl -X POST 'https://api.lilt.com/v2/files/labels?key=API_KEY&id=1' --header 'Content-Type: application/json' \\ --data-raw '{     \"name\": \"label_name\" }' ``` 
     * @param {String} id A File id.
     * @param {module:model/AddFileLabelRequest} name 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    addLabelWithHttpInfo(id, name) {
      let postBody = name;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling addLabel");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling addLabel");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/octet-stream', 'text/plain', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/files/labels', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Add Label to File
     * Add a label to a File.  Example CURL: ```bash curl -X POST 'https://api.lilt.com/v2/files/labels?key=API_KEY&id=1' --header 'Content-Type: application/json' \\ --data-raw '{     \"name\": \"label_name\" }' ``` 
     * @param {String} id A File id.
     * @param {module:model/AddFileLabelRequest} name 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    addLabel(id, name) {
      return this.addLabelWithHttpInfo(id, name)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a File
     * Delete a File.  Example CURL command: ```bash   curl -X DELETE https://api.lilt.com/v2/files?key=API_KEY&id=123  ```  
     * @param {Number} id A unique File identifier.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/FileDeleteResponse} and HTTP response
     */
    deleteFileWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteFile");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/octet-stream', 'text/plain'];
      let returnType = FileDeleteResponse;
      return this.apiClient.callApi(
        '/v2/files', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a File
     * Delete a File.  Example CURL command: ```bash   curl -X DELETE https://api.lilt.com/v2/files?key=API_KEY&id=123  ```  
     * @param {Number} id A unique File identifier.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/FileDeleteResponse}
     */
    deleteFile(id) {
      return this.deleteFileWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Download file
     * Download a File.  Example CURL: ```bash curl -X GET 'https://api.lilt.com/v2/files/download?key=API_KEY&id=1' ``` 
     * @param {String} id A File id.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Blob} and HTTP response
     */
    downloadWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling download");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth'];
      let contentTypes = [];
      let accepts = ['application/octet-stream', 'text/plain', 'application/json'];
      let returnType = 'Blob';
      return this.apiClient.callApi(
        '/v2/files/download', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Download file
     * Download a File.  Example CURL: ```bash curl -X GET 'https://api.lilt.com/v2/files/download?key=API_KEY&id=1' ``` 
     * @param {String} id A File id.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Blob}
     */
    download(id) {
      return this.downloadWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve a File
     * Retrieves one or more files available to your user. Files are not associated with a project or a memory. They are unprocessed and can be used later in the project/document creation workflow step.  To retrieve a specific file, specify the <strong>id</strong> request parameter. To retrieve all files, omit the <strong>id</strong> request parameter.  Example CURL command: ```bash  curl -X GET https://api.lilt.com/v2/files?key=API_KEY&id=274 ```
     * @param {Object} opts Optional parameters
     * @param {Number} opts.id A unique File identifier.
     * @param {Array.<String>} opts.labels One or more labels. This will return the files which contain all of the given labels. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/SourceFile>} and HTTP response
     */
    getFilesWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id'],
        'labels': this.apiClient.buildCollectionParam(opts['labels'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/octet-stream', 'text/plain'];
      let returnType = [SourceFile];
      return this.apiClient.callApi(
        '/v2/files', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve a File
     * Retrieves one or more files available to your user. Files are not associated with a project or a memory. They are unprocessed and can be used later in the project/document creation workflow step.  To retrieve a specific file, specify the <strong>id</strong> request parameter. To retrieve all files, omit the <strong>id</strong> request parameter.  Example CURL command: ```bash  curl -X GET https://api.lilt.com/v2/files?key=API_KEY&id=274 ```
     * @param {Object} opts Optional parameters
     * @param {Number} opts.id A unique File identifier.
     * @param {Array.<String>} opts.labels One or more labels. This will return the files which contain all of the given labels. 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/SourceFile>}
     */
    getFiles(opts) {
      return this.getFilesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove Label from File
     * Remove a label from a File.  Example CURL: ```bash curl -X DELETE 'https://api.lilt.com/v2/files/labels?key=API_KEY&id=1&name=label_name' ``` 
     * @param {String} id A File id.
     * @param {String} name A label name.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    removeLabelWithHttpInfo(id, name) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling removeLabel");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling removeLabel");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id,
        'name': name
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth'];
      let contentTypes = [];
      let accepts = ['application/octet-stream', 'text/plain', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/files/labels', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Remove Label from File
     * Remove a label from a File.  Example CURL: ```bash curl -X DELETE 'https://api.lilt.com/v2/files/labels?key=API_KEY&id=1&name=label_name' ``` 
     * @param {String} id A File id.
     * @param {String} name A label name.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    removeLabel(id, name) {
      return this.removeLabelWithHttpInfo(id, name)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Upload a File
     * Upload a File in any of the formats [documented in our knowledge base](https://support.lilt.com/hc/en-us/articles/360020816253-File-Formats). Request parameters should be passed in as query string parameters.  Example CURL command: ```bash   curl -X POST https://api.lilt.com/v2/files?key=API_KEY&name=en_US.json \\   --header \"Content-Type: application/octet-stream\" \\   --data-binary @en_US.json ``` Calls to GET /files are used to monitor the language detection results. The API response will be augmented to include detected language and confidence score.  The language detection will complete asynchronously. Prior to completion, the `detected_lang` value will be `zxx`, the reserved ISO 639-2 code for \"No linguistic content/not applicable\".  If the language can not be determined, or the detection process fails, the `detected_lang` field will return `und`, the reserved ISO 639-2 code for undetermined language, and the `detected_lang_confidence` score will be `0`.  
     * @param {String} name A file name.
     * @param {File} body The file contents to be uploaded. The entire POST body will be treated as the file.
     * @param {Object} opts Optional parameters
     * @param {String} opts.fileHash A hash value to associate with the file. The MD5 hash of the body contents will be used by default if a value isn't provided.
     * @param {Boolean} opts.langId Flag indicating whether to perform language detection on the uploaded file. Default is false.
     * @param {Number} opts.projectId The project to associate the uploaded file with.
     * @param {String} opts.category The category of the file. The options are `REFERENCE`, or `API`. The default is API. Files with the `REFERENCE` category will be displayed as reference material.
     * @param {String} opts.labels Comma-separated list of labels to add to the uploaded document.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SourceFile} and HTTP response
     */
    uploadFileWithHttpInfo(name, body, opts) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling uploadFile");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling uploadFile");
      }

      let pathParams = {
      };
      let queryParams = {
        'name': name,
        'file_hash': opts['fileHash'],
        'langId': opts['langId'],
        'project_id': opts['projectId'],
        'category': opts['category'],
        'labels': opts['labels']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth'];
      let contentTypes = ['application/octet-stream'];
      let accepts = ['application/json', 'application/octet-stream', 'text/plain'];
      let returnType = SourceFile;
      return this.apiClient.callApi(
        '/v2/files', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Upload a File
     * Upload a File in any of the formats [documented in our knowledge base](https://support.lilt.com/hc/en-us/articles/360020816253-File-Formats). Request parameters should be passed in as query string parameters.  Example CURL command: ```bash   curl -X POST https://api.lilt.com/v2/files?key=API_KEY&name=en_US.json \\   --header \"Content-Type: application/octet-stream\" \\   --data-binary @en_US.json ``` Calls to GET /files are used to monitor the language detection results. The API response will be augmented to include detected language and confidence score.  The language detection will complete asynchronously. Prior to completion, the `detected_lang` value will be `zxx`, the reserved ISO 639-2 code for \"No linguistic content/not applicable\".  If the language can not be determined, or the detection process fails, the `detected_lang` field will return `und`, the reserved ISO 639-2 code for undetermined language, and the `detected_lang_confidence` score will be `0`.  
     * @param {String} name A file name.
     * @param {File} body The file contents to be uploaded. The entire POST body will be treated as the file.
     * @param {Object} opts Optional parameters
     * @param {String} opts.fileHash A hash value to associate with the file. The MD5 hash of the body contents will be used by default if a value isn't provided.
     * @param {Boolean} opts.langId Flag indicating whether to perform language detection on the uploaded file. Default is false.
     * @param {Number} opts.projectId The project to associate the uploaded file with.
     * @param {String} opts.category The category of the file. The options are `REFERENCE`, or `API`. The default is API. Files with the `REFERENCE` category will be displayed as reference material.
     * @param {String} opts.labels Comma-separated list of labels to add to the uploaded document.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SourceFile}
     */
    uploadFile(name, body, opts) {
      return this.uploadFileWithHttpInfo(name, body, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
