/**
 * Lilt REST API
 * The Lilt REST API enables programmatic access to the full-range of Lilt backend services including:   * Training of and translating with interactive, adaptive machine translation   * Large-scale translation memory   * The Lexicon (a large-scale termbase)   * Programmatic control of the Lilt CAT environment   * Translation memory synchronization  Requests and responses are in JSON format. The REST API only responds to HTTPS / SSL requests.  ## Authentication  Requests are authenticated via REST API key, which requires the Business plan.  Requests are authenticated using [HTTP Basic Auth](https://en.wikipedia.org/wiki/Basic_access_authentication). Add your REST API key as both the `username` and `password`.  For development, you may also pass the REST API key via the `key` query parameter. This is less secure than HTTP Basic Auth, and is not recommended for production use.  ## Quotas  Our services have a general quota of 4000 requests per minute. Should you hit the maximum requests per minute, you will need to wait 60 seconds before you can send another request. 
 *
 * The version of the OpenAPI document: v2.0
 * Contact: support@lilt.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DocumentWorkflow from '../model/DocumentWorkflow';
import NextWorkflowTask from '../model/NextWorkflowTask';
import SetDocumentStageRequest from '../model/SetDocumentStageRequest';
import WorkflowTemplate from '../model/WorkflowTemplate';

/**
* Workflows service.
* @module api/WorkflowsApi
* @version 0.5.0
*/
export default class WorkflowsApi {

    /**
    * Constructs a new WorkflowsApi. 
    * @alias module:api/WorkflowsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Advance workflow to the next stage
     * Advance a workflow to the next stage and mark current workflow task as complete.  Example CURL: ``` curl --X --request POST 'https://lilt.com/2/workflows/document/{documentId}/task/{taskId}/advance?key=API_KEY' ```  
     * @param {Number} documentId A document id.
     * @param {Number} taskId The task id of the current workflow stage.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/NextWorkflowTask} and HTTP response
     */
    advanceWorkflowStageWithHttpInfo(documentId, taskId) {
      let postBody = null;
      // verify the required parameter 'documentId' is set
      if (documentId === undefined || documentId === null) {
        throw new Error("Missing the required parameter 'documentId' when calling advanceWorkflowStage");
      }
      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling advanceWorkflowStage");
      }

      let pathParams = {
        'documentId': documentId,
        'taskId': taskId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NextWorkflowTask;
      return this.apiClient.callApi(
        '/document/{documentId}/task/{taskId}/advance', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Advance workflow to the next stage
     * Advance a workflow to the next stage and mark current workflow task as complete.  Example CURL: ``` curl --X --request POST 'https://lilt.com/2/workflows/document/{documentId}/task/{taskId}/advance?key=API_KEY' ```  
     * @param {Number} documentId A document id.
     * @param {Number} taskId The task id of the current workflow stage.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/NextWorkflowTask}
     */
    advanceWorkflowStage(documentId, taskId) {
      return this.advanceWorkflowStageWithHttpInfo(documentId, taskId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve document Workflow metadata
     * Get Workflow metadata related to a document. This is useful for gathering information about the current Workflow stage of a document.  Example CURL: ``` curl --X --request GET 'https://lilt.com/2/workflows/document/{documentId}?key=API_KEY' ```  
     * @param {Number} documentId A document id.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DocumentWorkflow} and HTTP response
     */
    getDocumentWorkflowWithHttpInfo(documentId) {
      let postBody = null;
      // verify the required parameter 'documentId' is set
      if (documentId === undefined || documentId === null) {
        throw new Error("Missing the required parameter 'documentId' when calling getDocumentWorkflow");
      }

      let pathParams = {
        'documentId': documentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DocumentWorkflow;
      return this.apiClient.callApi(
        '/workflows/document/{documentId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve document Workflow metadata
     * Get Workflow metadata related to a document. This is useful for gathering information about the current Workflow stage of a document.  Example CURL: ``` curl --X --request GET 'https://lilt.com/2/workflows/document/{documentId}?key=API_KEY' ```  
     * @param {Number} documentId A document id.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DocumentWorkflow}
     */
    getDocumentWorkflow(documentId) {
      return this.getDocumentWorkflowWithHttpInfo(documentId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve workflow templates
     * Get all the possible Workflow Templates owned by the team. Useful for retrieving the ids corresponding to each workflow tables, and passing them to subsequent requests, for example, creating a new Job with a specific Workflow.  Example CURL: ``` curl --X --request GET 'https://lilt.com/2/workflows/templates?key=API_KEY' ```  
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/WorkflowTemplate>} and HTTP response
     */
    getWorkflowTemplatesWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [WorkflowTemplate];
      return this.apiClient.callApi(
        '/workflows/templates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieve workflow templates
     * Get all the possible Workflow Templates owned by the team. Useful for retrieving the ids corresponding to each workflow tables, and passing them to subsequent requests, for example, creating a new Job with a specific Workflow.  Example CURL: ``` curl --X --request GET 'https://lilt.com/2/workflows/templates?key=API_KEY' ```  
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/WorkflowTemplate>}
     */
    getWorkflowTemplates() {
      return this.getWorkflowTemplatesWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Move workflow to the previous stage
     * Move a workflow to the previous stage and mark current workflow task as rejected.  Example CURL: ``` curl --X --request POST 'https://lilt.com/2/workflows/document/{documentId}/task/{taskId}/reject?key=API_KEY' ```  
     * @param {Number} documentId A document id.
     * @param {Number} taskId The task id of the current workflow stage.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/NextWorkflowTask} and HTTP response
     */
    rejectWorkflowStageWithHttpInfo(documentId, taskId) {
      let postBody = null;
      // verify the required parameter 'documentId' is set
      if (documentId === undefined || documentId === null) {
        throw new Error("Missing the required parameter 'documentId' when calling rejectWorkflowStage");
      }
      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling rejectWorkflowStage");
      }

      let pathParams = {
        'documentId': documentId,
        'taskId': taskId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NextWorkflowTask;
      return this.apiClient.callApi(
        '/document/{documentId}/task/{taskId}/reject', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Move workflow to the previous stage
     * Move a workflow to the previous stage and mark current workflow task as rejected.  Example CURL: ``` curl --X --request POST 'https://lilt.com/2/workflows/document/{documentId}/task/{taskId}/reject?key=API_KEY' ```  
     * @param {Number} documentId A document id.
     * @param {Number} taskId The task id of the current workflow stage.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/NextWorkflowTask}
     */
    rejectWorkflowStage(documentId, taskId) {
      return this.rejectWorkflowStageWithHttpInfo(documentId, taskId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Set Workflow stage for a document
     * Set the Workflow stage for a document. You can find the stage information required for this request from the \"Retrieve document Workflow metadata\" endpoint.  Example CURL: ``` curl --X --request PUT 'https://lilt.com/2/workflows/document/{documentId}/stage?key=API_KEY' \\ --header 'Content-Type: application/json' \\ --data-raw '{   \"workflowStageId\": {workflowStageId} }' ```  
     * @param {Number} documentId A document id.
     * @param {Object} opts Optional parameters
     * @param {module:model/SetDocumentStageRequest} opts.workflowStageId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/NextWorkflowTask} and HTTP response
     */
    setDocumentStageWithHttpInfo(documentId, opts) {
      opts = opts || {};
      let postBody = opts['workflowStageId'];
      // verify the required parameter 'documentId' is set
      if (documentId === undefined || documentId === null) {
        throw new Error("Missing the required parameter 'documentId' when calling setDocumentStage");
      }

      let pathParams = {
        'documentId': documentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth', 'BasicAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = NextWorkflowTask;
      return this.apiClient.callApi(
        '/workflows/{documentId}/stage', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Set Workflow stage for a document
     * Set the Workflow stage for a document. You can find the stage information required for this request from the \"Retrieve document Workflow metadata\" endpoint.  Example CURL: ``` curl --X --request PUT 'https://lilt.com/2/workflows/document/{documentId}/stage?key=API_KEY' \\ --header 'Content-Type: application/json' \\ --data-raw '{   \"workflowStageId\": {workflowStageId} }' ```  
     * @param {Number} documentId A document id.
     * @param {Object} opts Optional parameters
     * @param {module:model/SetDocumentStageRequest} opts.workflowStageId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/NextWorkflowTask}
     */
    setDocumentStage(documentId, opts) {
      return this.setDocumentStageWithHttpInfo(documentId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
