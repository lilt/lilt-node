/**
 * Lilt REST API
 * The Lilt REST API enables programmatic access to the full-range of Lilt backend services including:   * Training of and translating with interactive, adaptive machine translation   * Large-scale translation memory   * The Lexicon (a large-scale termbase)   * Programmatic control of the Lilt CAT environment   * Translation memory synchronization  Requests and responses are in JSON format. The REST API only responds to HTTPS / SSL requests. ## Authentication Requests are authenticated via REST API key, which requires the Business plan.  Requests are authenticated using [HTTP Basic Auth](https://en.wikipedia.org/wiki/Basic_access_authentication). Add your REST API key as both the `username` and `password`.  For development, you may also pass the REST API key via the `key` query parameter. This is less secure than HTTP Basic Auth, and is not recommended for production use. 
 *
 * OpenAPI spec version: v2.0
 * Contact: support@lilt.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ResourceStatus from './ResourceStatus';

/**
* The ProjectStatus model module.
* @module model/ProjectStatus
* @version v2.0
*/
export default class ProjectStatus {
    /**
    * Constructs a new <code>ProjectStatus</code>.
    * The status of a Project. 
    * @alias module:model/ProjectStatus
    * @class
    */

    constructor() {
        
        
        
    }

    /**
    * Constructs a <code>ProjectStatus</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/ProjectStatus} obj Optional instance to populate.
    * @return {module:model/ProjectStatus} The populated <code>ProjectStatus</code> instance.
    */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ProjectStatus();
                        
            
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('num_source_words')) {
                obj['num_source_words'] = ApiClient.convertToType(data['num_source_words'], 'Number');
            }
            if (data.hasOwnProperty('num_words_confirmed')) {
                obj['num_words_confirmed'] = ApiClient.convertToType(data['num_words_confirmed'], 'Number');
            }
            if (data.hasOwnProperty('num_words_reviewed')) {
                obj['num_words_reviewed'] = ApiClient.convertToType(data['num_words_reviewed'], 'Number');
            }
            if (data.hasOwnProperty('time_elapsed')) {
                obj['time_elapsed'] = ApiClient.convertToType(data['time_elapsed'], 'Number');
            }
            if (data.hasOwnProperty('time_elapsed_translation')) {
                obj['time_elapsed_translation'] = ApiClient.convertToType(data['time_elapsed_translation'], 'Number');
            }
            if (data.hasOwnProperty('time_elapsed_research')) {
                obj['time_elapsed_research'] = ApiClient.convertToType(data['time_elapsed_research'], 'Number');
            }
            if (data.hasOwnProperty('time_elapsed_review')) {
                obj['time_elapsed_review'] = ApiClient.convertToType(data['time_elapsed_review'], 'Number');
            }
            if (data.hasOwnProperty('resources')) {
                obj['resources'] = ApiClient.convertToType(data['resources'], [ResourceStatus]);
            }
        }
        return obj;
    }

    /**
    * A unique Project identifier.
    * @member {Number} id
    */
    id = undefined;
    /**
    * The number of source words in the Project.
    * @member {Number} num_source_words
    */
    num_source_words = undefined;
    /**
    * The number of confirmed source words.
    * @member {Number} num_words_confirmed
    */
    num_words_confirmed = undefined;
    /**
    * The number of reviewed source words.
    * @member {Number} num_words_reviewed
    */
    num_words_reviewed = undefined;
    /**
    * The total time spent on the project by all resources. Measured in milliseconds.
    * @member {Number} time_elapsed
    */
    time_elapsed = undefined;
    /**
    * The total time spent on translation by all resources. Measured in milliseconds.
    * @member {Number} time_elapsed_translation
    */
    time_elapsed_translation = undefined;
    /**
    * The total time spent on research by all resources. Measured in milliseconds.
    * @member {Number} time_elapsed_research
    */
    time_elapsed_research = undefined;
    /**
    * The total time spent on reviewing by all resources. Measured in milliseconds.
    * @member {Number} time_elapsed_review
    */
    time_elapsed_review = undefined;
    /**
    * A list of ResourceStatus objects that represent per-resource statistics.
    * @member {Array.<module:model/ResourceStatus>} resources
    */
    resources = undefined;




}
