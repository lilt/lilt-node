/**
 * Lilt REST API
 * Lilt REST API Support: https://lilt.atlassian.net/servicedesk/customer/portals    The Lilt REST API enables programmatic access to the full-range of Lilt backend services including:   * Training of and translating with interactive, adaptive machine translation   * Large-scale translation memory   * The Lexicon (a large-scale termbase)   * Programmatic control of the Lilt CAT environment   * Translation memory synchronization  Requests and responses are in JSON format. The REST API only responds to HTTPS / SSL requests.  The base url for this REST API is `https://api.lilt.com/`.  ## Authentication  Requests are authenticated via REST API key, which requires the Business plan.  Requests are authenticated using [HTTP Basic Auth](https://en.wikipedia.org/wiki/Basic_access_authentication). Add your REST API key as both the `username` and `password`.  For development, you may also pass the REST API key via the `key` query parameter. This is less secure than HTTP Basic Auth, and is not recommended for production use.  ## Quotas  Our services have a general quota of 4000 requests per minute. Should you hit the maximum requests per minute, you will need to wait 60 seconds before you can send another request. 
 *
 * The version of the OpenAPI document: v3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import WorkflowStageTemplate from './WorkflowStageTemplate';

/**
 * The WorkflowTemplate model module.
 * @module model/WorkflowTemplate
 * @version v3.0
 */
class WorkflowTemplate {
    /**
     * Constructs a new <code>WorkflowTemplate</code>.
     * A workflow template which defines the workflow&#39;s possible steps (combination of Translation, Review and Customer Review).
     * @alias module:model/WorkflowTemplate
     */
    constructor() { 
        
        WorkflowTemplate.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>WorkflowTemplate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WorkflowTemplate} obj Optional instance to populate.
     * @return {module:model/WorkflowTemplate} The populated <code>WorkflowTemplate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WorkflowTemplate();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('TeamId')) {
                obj['TeamId'] = ApiClient.convertToType(data['TeamId'], 'Number');
            }
            if (data.hasOwnProperty('stages')) {
                obj['stages'] = ApiClient.convertToType(data['stages'], [WorkflowStageTemplate]);
            }
        }
        return obj;
    }


}

/**
 * Identifier of a teams Workflow template. Can be used during Job creation for specifying the workflow used for a job or language pair.
 * @member {Number} id
 */
WorkflowTemplate.prototype['id'] = undefined;

/**
 * @member {String} name
 */
WorkflowTemplate.prototype['name'] = undefined;

/**
 * The name of a given Workflow template.
 * @member {Number} TeamId
 */
WorkflowTemplate.prototype['TeamId'] = undefined;

/**
 * The stages in this workflow template.
 * @member {Array.<module:model/WorkflowStageTemplate>} stages
 */
WorkflowTemplate.prototype['stages'] = undefined;






export default WorkflowTemplate;

