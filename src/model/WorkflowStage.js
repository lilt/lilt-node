/**
 * Lilt REST API
 * The Lilt REST API enables programmatic access to the full-range of Lilt backend services including:   * Training of and translating with interactive, adaptive machine translation   * Large-scale translation memory   * The Lexicon (a large-scale termbase)   * Programmatic control of the Lilt CAT environment   * Translation memory synchronization  Requests and responses are in JSON format. The REST API only responds to HTTPS / SSL requests.  ## Authentication  Requests are authenticated via REST API key, which requires the Business plan.  Requests are authenticated using [HTTP Basic Auth](https://en.wikipedia.org/wiki/Basic_access_authentication). Add your REST API key as both the `username` and `password`.  For development, you may also pass the REST API key via the `key` query parameter. This is less secure than HTTP Basic Auth, and is not recommended for production use.  ## Quotas  Our services have a general quota of 4000 requests per minute. Should you hit the maximum requests per minute, you will need to wait 60 seconds before you can send another request. 
 *
 * The version of the OpenAPI document: v2.0
 * Contact: support@lilt.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The WorkflowStage model module.
 * @module model/WorkflowStage
 * @version 0.5.0
 */
class WorkflowStage {
    /**
     * Constructs a new <code>WorkflowStage</code>.
     * Workflow stage information.
     * @alias module:model/WorkflowStage
     * @param name {String} Name of the stage.
     * @param assignmentType {module:model/WorkflowStage.AssignmentTypeEnum} An enum to represent all possible types of Workflow stage.
     */
    constructor(name, assignmentType) { 
        
        WorkflowStage.initialize(this, name, assignmentType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, assignmentType) { 
        obj['name'] = name;
        obj['assignmentType'] = assignmentType;
    }

    /**
     * Constructs a <code>WorkflowStage</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WorkflowStage} obj Optional instance to populate.
     * @return {module:model/WorkflowStage} The populated <code>WorkflowStage</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WorkflowStage();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('active')) {
                obj['active'] = ApiClient.convertToType(data['active'], 'Boolean');
            }
            if (data.hasOwnProperty('assignmentType')) {
                obj['assignmentType'] = ApiClient.convertToType(data['assignmentType'], 'String');
            }
        }
        return obj;
    }


}

/**
 * Identifier of the stage.
 * @member {Number} id
 */
WorkflowStage.prototype['id'] = undefined;

/**
 * Name of the stage.
 * @member {String} name
 */
WorkflowStage.prototype['name'] = undefined;

/**
 * Flag which is set to true when the stage is active for a document.
 * @member {Boolean} active
 */
WorkflowStage.prototype['active'] = undefined;

/**
 * An enum to represent all possible types of Workflow stage.
 * @member {module:model/WorkflowStage.AssignmentTypeEnum} assignmentType
 */
WorkflowStage.prototype['assignmentType'] = undefined;





/**
 * Allowed values for the <code>assignmentType</code> property.
 * @enum {String}
 * @readonly
 */
WorkflowStage['AssignmentTypeEnum'] = {

    /**
     * value: "READY_TO_START"
     * @const
     */
    "READY_TO_START": "READY_TO_START",

    /**
     * value: "TRANSLATE"
     * @const
     */
    "TRANSLATE": "TRANSLATE",

    /**
     * value: "REVIEW"
     * @const
     */
    "REVIEW": "REVIEW",

    /**
     * value: "SECONDARY_REVIEW"
     * @const
     */
    "SECONDARY_REVIEW": "SECONDARY_REVIEW",

    /**
     * value: "DONE"
     * @const
     */
    "DONE": "DONE"
};



export default WorkflowStage;

