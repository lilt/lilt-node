/**
 * Lilt REST API
 * Lilt REST API Support: https://lilt.atlassian.net/servicedesk/customer/portals    The Lilt REST API enables programmatic access to the full-range of Lilt backend services including:   * Training of and translating with interactive, adaptive machine translation   * Large-scale translation memory   * The Lexicon (a large-scale termbase)   * Programmatic control of the Lilt CAT environment   * Translation memory synchronization  Requests and responses are in JSON format. The REST API only responds to HTTPS / SSL requests.  The base url for this REST API is `https://api.lilt.com/`.  ## Authentication  Requests are authenticated via REST API key, which requires the Business plan.  Requests are authenticated using [HTTP Basic Auth](https://en.wikipedia.org/wiki/Basic_access_authentication). Add your REST API key as both the `username` and `password`.  For development, you may also pass the REST API key via the `key` query parameter. This is less secure than HTTP Basic Auth, and is not recommended for production use.  ## Quotas  Our services have a general quota of 4000 requests per minute. Should you hit the maximum requests per minute, you will need to wait 60 seconds before you can send another request. 
 *
 * The version of the OpenAPI document: v3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LiltCreateContentPreferences from './LiltCreateContentPreferences';
import LiltCreateContentTemplateParams from './LiltCreateContentTemplateParams';

/**
 * The LiltCreateContent model module.
 * @module model/LiltCreateContent
 * @version 3.0.0
 */
class LiltCreateContent {
    /**
     * Constructs a new <code>LiltCreateContent</code>.
     * Content Parameters for LiltCreate. 
     * @alias module:model/LiltCreateContent
     * @param language {String} The language of the content.
     * @param template {String} The template of the content.
     * @param templateParams {module:model/LiltCreateContentTemplateParams} 
     */
    constructor(language, template, templateParams) { 
        
        LiltCreateContent.initialize(this, language, template, templateParams);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, language, template, templateParams) { 
        obj['language'] = language;
        obj['template'] = template;
        obj['templateParams'] = templateParams;
    }

    /**
     * Constructs a <code>LiltCreateContent</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LiltCreateContent} obj Optional instance to populate.
     * @return {module:model/LiltCreateContent} The populated <code>LiltCreateContent</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LiltCreateContent();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('language')) {
                obj['language'] = ApiClient.convertToType(data['language'], 'String');
            }
            if (data.hasOwnProperty('template')) {
                obj['template'] = ApiClient.convertToType(data['template'], 'String');
            }
            if (data.hasOwnProperty('templateParams')) {
                obj['templateParams'] = LiltCreateContentTemplateParams.constructFromObject(data['templateParams']);
            }
            if (data.hasOwnProperty('preferences')) {
                obj['preferences'] = LiltCreateContentPreferences.constructFromObject(data['preferences']);
            }
        }
        return obj;
    }


}

/**
 * A name for the request content.
 * @member {String} name
 */
LiltCreateContent.prototype['name'] = undefined;

/**
 * A unique identifier for the generated content.
 * @member {Number} id
 */
LiltCreateContent.prototype['id'] = undefined;

/**
 * The language of the content.
 * @member {String} language
 */
LiltCreateContent.prototype['language'] = undefined;

/**
 * The template of the content.
 * @member {String} template
 */
LiltCreateContent.prototype['template'] = undefined;

/**
 * @member {module:model/LiltCreateContentTemplateParams} templateParams
 */
LiltCreateContent.prototype['templateParams'] = undefined;

/**
 * @member {module:model/LiltCreateContentPreferences} preferences
 */
LiltCreateContent.prototype['preferences'] = undefined;






export default LiltCreateContent;

