/**
 * Lilt REST API
 * The Lilt REST API enables programmatic access to the full-range of Lilt backend services including:   * Training of and translating with interactive, adaptive machine translation   * Large-scale translation memory   * The Lexicon (a large-scale termbase)   * Programmatic control of the Lilt CAT environment   * Translation memory synchronization  Requests and responses are in JSON format. The REST API only responds to HTTPS / SSL requests.  ## Authentication  Requests are authenticated via REST API key, which requires the Business plan.  Requests are authenticated using [HTTP Basic Auth](https://en.wikipedia.org/wiki/Basic_access_authentication). Add your REST API key as both the `username` and `password`.  For development, you may also pass the REST API key via the `key` query parameter. This is less secure than HTTP Basic Auth, and is not recommended for production use.  ## Quotas  Our services have a general quota of 4000 requests per minute. Should you hit the maximum requests per minute, you will need to wait 60 seconds before you can send another request. 
 *
 * The version of the OpenAPI document: v2.0
 * Contact: support@lilt.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CreateConverterConfigParameters model module.
 * @module model/CreateConverterConfigParameters
 * @version 0.5.0
 */
class CreateConverterConfigParameters {
    /**
     * Constructs a new <code>CreateConverterConfigParameters</code>.
     * @alias module:model/CreateConverterConfigParameters
     * @param configJson {String} The configuration json blob, string escaped.
     * @param configName {String} The user defined name of your configuration.
     * @param configDescription {String} A description for the configuration.
     */
    constructor(configJson, configName, configDescription) { 
        
        CreateConverterConfigParameters.initialize(this, configJson, configName, configDescription);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, configJson, configName, configDescription) { 
        obj['configJson'] = configJson;
        obj['configName'] = configName;
        obj['configDescription'] = configDescription;
    }

    /**
     * Constructs a <code>CreateConverterConfigParameters</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateConverterConfigParameters} obj Optional instance to populate.
     * @return {module:model/CreateConverterConfigParameters} The populated <code>CreateConverterConfigParameters</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateConverterConfigParameters();

            if (data.hasOwnProperty('configJson')) {
                obj['configJson'] = ApiClient.convertToType(data['configJson'], 'String');
            }
            if (data.hasOwnProperty('configName')) {
                obj['configName'] = ApiClient.convertToType(data['configName'], 'String');
            }
            if (data.hasOwnProperty('configDescription')) {
                obj['configDescription'] = ApiClient.convertToType(data['configDescription'], 'String');
            }
        }
        return obj;
    }


}

/**
 * The configuration json blob, string escaped.
 * @member {String} configJson
 */
CreateConverterConfigParameters.prototype['configJson'] = undefined;

/**
 * The user defined name of your configuration.
 * @member {String} configName
 */
CreateConverterConfigParameters.prototype['configName'] = undefined;

/**
 * A description for the configuration.
 * @member {String} configDescription
 */
CreateConverterConfigParameters.prototype['configDescription'] = undefined;






export default CreateConverterConfigParameters;

