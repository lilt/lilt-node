/**
 * Lilt REST API
 * Lilt REST API Support: https://lilt.atlassian.net/servicedesk/customer/portals    The Lilt REST API enables programmatic access to the full-range of Lilt backend services including:   * Training of and translating with interactive, adaptive machine translation   * Large-scale translation memory   * The Lexicon (a large-scale termbase)   * Programmatic control of the Lilt CAT environment   * Translation memory synchronization  Requests and responses are in JSON format. The REST API only responds to HTTPS / SSL requests.  The base url for this REST API is `https://api.lilt.com/`.  ## Authentication  Requests are authenticated via REST API key, which requires the Business plan.  Requests are authenticated using [HTTP Basic Auth](https://en.wikipedia.org/wiki/Basic_access_authentication). Add your REST API key as both the `username` and `password`.  For development, you may also pass the REST API key via the `key` query parameter. This is less secure than HTTP Basic Auth, and is not recommended for production use.  ## Quotas  Our services have a general quota of 4000 requests per minute. Should you hit the maximum requests per minute, you will need to wait 60 seconds before you can send another request. 
 *
 * The version of the OpenAPI document: v3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The MemoryCreateParameters model module.
 * @module model/MemoryCreateParameters
 * @version 0.6.3
 */
class MemoryCreateParameters {
    /**
     * Constructs a new <code>MemoryCreateParameters</code>.
     * @alias module:model/MemoryCreateParameters
     * @param name {String} A name for the Memory.
     * @param srclang {String} An ISO 639-1 language identifier.
     * @param trglang {String} An ISO 639-1 language identifier.
     */
    constructor(name, srclang, trglang) { 
        
        MemoryCreateParameters.initialize(this, name, srclang, trglang);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, srclang, trglang) { 
        obj['name'] = name;
        obj['srclang'] = srclang;
        obj['trglang'] = trglang;
    }

    /**
     * Constructs a <code>MemoryCreateParameters</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MemoryCreateParameters} obj Optional instance to populate.
     * @return {module:model/MemoryCreateParameters} The populated <code>MemoryCreateParameters</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MemoryCreateParameters();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('srclang')) {
                obj['srclang'] = ApiClient.convertToType(data['srclang'], 'String');
            }
            if (data.hasOwnProperty('trglang')) {
                obj['trglang'] = ApiClient.convertToType(data['trglang'], 'String');
            }
            if (data.hasOwnProperty('srclocale')) {
                obj['srclocale'] = ApiClient.convertToType(data['srclocale'], 'String');
            }
            if (data.hasOwnProperty('trglocale')) {
                obj['trglocale'] = ApiClient.convertToType(data['trglocale'], 'String');
            }
        }
        return obj;
    }


}

/**
 * A name for the Memory.
 * @member {String} name
 */
MemoryCreateParameters.prototype['name'] = undefined;

/**
 * An ISO 639-1 language identifier.
 * @member {String} srclang
 */
MemoryCreateParameters.prototype['srclang'] = undefined;

/**
 * An ISO 639-1 language identifier.
 * @member {String} trglang
 */
MemoryCreateParameters.prototype['trglang'] = undefined;

/**
 * An ISO 3166-1 region name for language locales
 * @member {String} srclocale
 */
MemoryCreateParameters.prototype['srclocale'] = undefined;

/**
 * An ISO 3166-1 region name for language locales
 * @member {String} trglocale
 */
MemoryCreateParameters.prototype['trglocale'] = undefined;






export default MemoryCreateParameters;

