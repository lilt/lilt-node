/**
 * Lilt REST API
 * The Lilt REST API enables programmatic access to the full-range of Lilt backend services including:   * Training of and translating with interactive, adaptive machine translation   * Large-scale translation memory   * The Lexicon (a large-scale termbase)   * Programmatic control of the Lilt CAT environment   * Translation memory synchronization  Requests and responses are in JSON format. The REST API only responds to HTTPS / SSL requests.  ## Authentication  Requests are authenticated via REST API key, which requires the Business plan.  Requests are authenticated using [HTTP Basic Auth](https://en.wikipedia.org/wiki/Basic_access_authentication). Add your REST API key as both the `username` and `password`.  For development, you may also pass the REST API key via the `key` query parameter. This is less secure than HTTP Basic Auth, and is not recommended for production use.  ## Quotas  Our services have a general quota of 4000 requests per minute. Should you hit the maximum requests per minute, you will need to wait 60 seconds before you can send another request. 
 *
 * The version of the OpenAPI document: v2.0
 * Contact: support@lilt.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The NextWorkflowTask model module.
 * @module model/NextWorkflowTask
 * @version 0.5.0
 */
class NextWorkflowTask {
    /**
     * Constructs a new <code>NextWorkflowTask</code>.
     * Information about a document workflow task after it has moved a stage.
     * @alias module:model/NextWorkflowTask
     * @param status {module:model/NextWorkflowTask.StatusEnum} Identifier of the current workflow task.
     */
    constructor(status) { 
        
        NextWorkflowTask.initialize(this, status);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, status) { 
        obj['status'] = status;
    }

    /**
     * Constructs a <code>NextWorkflowTask</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NextWorkflowTask} obj Optional instance to populate.
     * @return {module:model/NextWorkflowTask} The populated <code>NextWorkflowTask</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NextWorkflowTask();

            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('newTaskId')) {
                obj['newTaskId'] = ApiClient.convertToType(data['newTaskId'], 'Number');
            }
            if (data.hasOwnProperty('newStageName')) {
                obj['newStageName'] = ApiClient.convertToType(data['newStageName'], 'String');
            }
        }
        return obj;
    }


}

/**
 * Identifier of the current workflow task.
 * @member {module:model/NextWorkflowTask.StatusEnum} status
 */
NextWorkflowTask.prototype['status'] = undefined;

/**
 * The identifier of the workflow task that is now currently active.
 * @member {Number} newTaskId
 */
NextWorkflowTask.prototype['newTaskId'] = undefined;

/**
 * The name of the workflow task that is now currently active.
 * @member {String} newStageName
 */
NextWorkflowTask.prototype['newStageName'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
NextWorkflowTask['StatusEnum'] = {

    /**
     * value: "SUCCESS"
     * @const
     */
    "SUCCESS": "SUCCESS",

    /**
     * value: "WORKFLOW_FINISHED"
     * @const
     */
    "WORKFLOW_FINISHED": "WORKFLOW_FINISHED",

    /**
     * value: "ALREADY_AT_START"
     * @const
     */
    "ALREADY_AT_START": "ALREADY_AT_START",

    /**
     * value: "INVALID_ARGUMENT"
     * @const
     */
    "INVALID_ARGUMENT": "INVALID_ARGUMENT",

    /**
     * value: "POSTCONDITIONS_FAILED"
     * @const
     */
    "POSTCONDITIONS_FAILED": "POSTCONDITIONS_FAILED",

    /**
     * value: "UNKNOWN_ERROR"
     * @const
     */
    "UNKNOWN_ERROR": "UNKNOWN_ERROR"
};



export default NextWorkflowTask;

