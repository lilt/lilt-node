/**
 * Lilt REST API
 * The Lilt REST API enables programmatic access to the full-range of Lilt backend services including:   * Training of and translating with interactive, adaptive machine translation   * Large-scale translation memory   * The Lexicon (a large-scale termbase)   * Programmatic control of the Lilt CAT environment   * Translation memory synchronization  Requests and responses are in JSON format. The REST API only responds to HTTPS / SSL requests.  ## Authentication  Requests are authenticated via REST API key, which requires the Business plan.  Requests are authenticated using [HTTP Basic Auth](https://en.wikipedia.org/wiki/Basic_access_authentication). Add your REST API key as both the `username` and `password`.  For development, you may also pass the REST API key via the `key` query parameter. This is less secure than HTTP Basic Auth, and is not recommended for production use.  ## Quotas  Our services have a general quota of 4000 requests per minute. Should you hit the maximum requests per minute, you will need to wait 60 seconds before you can send another request. 
 *
 * The version of the OpenAPI document: v2.0
 * Contact: support@lilt.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import QARuleMatchesContext from './QARuleMatchesContext';
import QARuleMatchesReplacements from './QARuleMatchesReplacements';
import QARuleMatchesRule from './QARuleMatchesRule';

/**
 * The QARuleMatchesMatches model module.
 * @module model/QARuleMatchesMatches
 * @version 0.5.0
 */
class QARuleMatchesMatches {
    /**
     * Constructs a new <code>QARuleMatchesMatches</code>.
     * @alias module:model/QARuleMatchesMatches
     * @param context {module:model/QARuleMatchesContext} 
     * @param length {Number} The length of the error in characters.
     * @param message {String} Message about the error displayed to the user.
     * @param offset {Number} The 0-based character offset of the error in the text.
     * @param replacements {Array.<module:model/QARuleMatchesReplacements>} Replacements that might correct the error. The array can be empty, in this case there is no suggested replacement.
     */
    constructor(context, length, message, offset, replacements) { 
        
        QARuleMatchesMatches.initialize(this, context, length, message, offset, replacements);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, context, length, message, offset, replacements) { 
        obj['context'] = context;
        obj['length'] = length;
        obj['message'] = message;
        obj['offset'] = offset;
        obj['replacements'] = replacements;
    }

    /**
     * Constructs a <code>QARuleMatchesMatches</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/QARuleMatchesMatches} obj Optional instance to populate.
     * @return {module:model/QARuleMatchesMatches} The populated <code>QARuleMatchesMatches</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new QARuleMatchesMatches();

            if (data.hasOwnProperty('context')) {
                obj['context'] = QARuleMatchesContext.constructFromObject(data['context']);
            }
            if (data.hasOwnProperty('length')) {
                obj['length'] = ApiClient.convertToType(data['length'], 'Number');
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
            if (data.hasOwnProperty('offset')) {
                obj['offset'] = ApiClient.convertToType(data['offset'], 'Number');
            }
            if (data.hasOwnProperty('replacements')) {
                obj['replacements'] = ApiClient.convertToType(data['replacements'], [QARuleMatchesReplacements]);
            }
            if (data.hasOwnProperty('rule')) {
                obj['rule'] = QARuleMatchesRule.constructFromObject(data['rule']);
            }
            if (data.hasOwnProperty('shortMessage')) {
                obj['shortMessage'] = ApiClient.convertToType(data['shortMessage'], 'String');
            }
        }
        return obj;
    }


}

/**
 * @member {module:model/QARuleMatchesContext} context
 */
QARuleMatchesMatches.prototype['context'] = undefined;

/**
 * The length of the error in characters.
 * @member {Number} length
 */
QARuleMatchesMatches.prototype['length'] = undefined;

/**
 * Message about the error displayed to the user.
 * @member {String} message
 */
QARuleMatchesMatches.prototype['message'] = undefined;

/**
 * The 0-based character offset of the error in the text.
 * @member {Number} offset
 */
QARuleMatchesMatches.prototype['offset'] = undefined;

/**
 * Replacements that might correct the error. The array can be empty, in this case there is no suggested replacement.
 * @member {Array.<module:model/QARuleMatchesReplacements>} replacements
 */
QARuleMatchesMatches.prototype['replacements'] = undefined;

/**
 * @member {module:model/QARuleMatchesRule} rule
 */
QARuleMatchesMatches.prototype['rule'] = undefined;

/**
 * An optional shorter version of 'message'.
 * @member {String} shortMessage
 */
QARuleMatchesMatches.prototype['shortMessage'] = undefined;






export default QARuleMatchesMatches;

