/**
 * Lilt REST API
 * The Lilt REST API enables programmatic access to the full-range of Lilt backend services including:   * Training of and translating with interactive, adaptive machine translation   * Large-scale translation memory   * The Lexicon (a large-scale termbase)   * Programmatic control of the Lilt CAT environment   * Translation memory synchronization  Requests and responses are in JSON format. The REST API only responds to HTTPS / SSL requests. ## Authentication Requests are authenticated via REST API key, which requires the Business plan.  Requests are authenticated using [HTTP Basic Auth](https://en.wikipedia.org/wiki/Basic_access_authentication). Add your REST API key as both the `username` and `password`.  For development, you may also pass the REST API key via the `key` query parameter. This is less secure than HTTP Basic Auth, and is not recommended for production use. 
 *
 * OpenAPI spec version: v2.0
 * Contact: support@lilt.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Segment from './Segment';

/**
* The DocumentWithSegments model module.
* @module model/DocumentWithSegments
* @version v2.0
*/
export default class DocumentWithSegments {
    /**
    * Constructs a new <code>DocumentWithSegments</code>.
    * A Document is a collection of zero or more Segments. 
    * @alias module:model/DocumentWithSegments
    * @class
    */

    constructor() {
        
        
        
    }

    /**
    * Constructs a <code>DocumentWithSegments</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/DocumentWithSegments} obj Optional instance to populate.
    * @return {module:model/DocumentWithSegments} The populated <code>DocumentWithSegments</code> instance.
    */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DocumentWithSegments();
                        
            
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('project_id')) {
                obj['project_id'] = ApiClient.convertToType(data['project_id'], 'Number');
            }
            if (data.hasOwnProperty('srclang')) {
                obj['srclang'] = ApiClient.convertToType(data['srclang'], 'String');
            }
            if (data.hasOwnProperty('trglang')) {
                obj['trglang'] = ApiClient.convertToType(data['trglang'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('import_in_progress')) {
                obj['import_in_progress'] = ApiClient.convertToType(data['import_in_progress'], 'Boolean');
            }
            if (data.hasOwnProperty('import_succeeded')) {
                obj['import_succeeded'] = ApiClient.convertToType(data['import_succeeded'], 'Boolean');
            }
            if (data.hasOwnProperty('import_error_message')) {
                obj['import_error_message'] = ApiClient.convertToType(data['import_error_message'], 'String');
            }
            if (data.hasOwnProperty('export_in_progress')) {
                obj['export_in_progress'] = ApiClient.convertToType(data['export_in_progress'], 'Boolean');
            }
            if (data.hasOwnProperty('export_succeeded')) {
                obj['export_succeeded'] = ApiClient.convertToType(data['export_succeeded'], 'Boolean');
            }
            if (data.hasOwnProperty('export_error_message')) {
                obj['export_error_message'] = ApiClient.convertToType(data['export_error_message'], 'String');
            }
            if (data.hasOwnProperty('is_pretranslating')) {
                obj['is_pretranslating'] = ApiClient.convertToType(data['is_pretranslating'], 'Boolean');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], Object);
            }
            if (data.hasOwnProperty('translator_email')) {
                obj['translator_email'] = ApiClient.convertToType(data['translator_email'], 'String');
            }
            if (data.hasOwnProperty('reviewer_email')) {
                obj['reviewer_email'] = ApiClient.convertToType(data['reviewer_email'], 'String');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Number');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'Number');
            }
            if (data.hasOwnProperty('segments')) {
                obj['segments'] = ApiClient.convertToType(data['segments'], [Segment]);
            }
        }
        return obj;
    }

    /**
    * A unique number identifying the Document.
    * @member {Number} id
    */
    id = undefined;
    /**
    * A unique number identifying the Project.
    * @member {Number} project_id
    */
    project_id = undefined;
    /**
    * An ISO 639-1 language identifier.
    * @member {String} srclang
    */
    srclang = undefined;
    /**
    * An ISO 639-1 language identifier.
    * @member {String} trglang
    */
    trglang = undefined;
    /**
    * The document name.
    * @member {String} name
    */
    name = undefined;
    /**
    * True if the document is currently being imported
    * @member {Boolean} import_in_progress
    */
    import_in_progress = undefined;
    /**
    * True if the import process succeeded.
    * @member {Boolean} import_succeeded
    */
    import_succeeded = undefined;
    /**
    * Error message if `import_succeeded=false`
    * @member {String} import_error_message
    */
    import_error_message = undefined;
    /**
    * True if the document is currently being exported for download
    * @member {Boolean} export_in_progress
    */
    export_in_progress = undefined;
    /**
    * True if the export process succeeded.
    * @member {Boolean} export_succeeded
    */
    export_succeeded = undefined;
    /**
    * Error message if `export_succeeded=false`
    * @member {String} export_error_message
    */
    export_error_message = undefined;
    /**
    * True if the document is currently being pretranslated.
    * @member {Boolean} is_pretranslating
    */
    is_pretranslating = undefined;
    /**
    * A list of translations for the query term.
    * @member {Object} status
    */
    status = undefined;
    /**
    * The email of the assigned translator.
    * @member {String} translator_email
    */
    translator_email = undefined;
    /**
    * The email of the assigned reviewer.
    * @member {String} reviewer_email
    */
    reviewer_email = undefined;
    /**
    * Time at which the object was created. Measured in seconds since the Unix epoch.
    * @member {Number} created_at
    */
    created_at = undefined;
    /**
    * Time at which the object was created. Measured in seconds since the Unix epoch.
    * @member {Number} updated_at
    */
    updated_at = undefined;
    /**
    * A list of Segments.
    * @member {Array.<module:model/Segment>} segments
    */
    segments = undefined;




}
