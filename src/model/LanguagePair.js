/**
 * Lilt REST API
 * Lilt REST API Support: https://lilt.atlassian.net/servicedesk/customer/portals    The Lilt REST API enables programmatic access to the full-range of Lilt backend services including:   * Training of and translating with interactive, adaptive machine translation   * Large-scale translation memory   * The Lexicon (a large-scale termbase)   * Programmatic control of the Lilt CAT environment   * Translation memory synchronization  Requests and responses are in JSON format. The REST API only responds to HTTPS / SSL requests.  The base url for this REST API is `https://api.lilt.com/`.  ## Authentication  Requests are authenticated via REST API key, which requires the Business plan.  Requests are authenticated using [HTTP Basic Auth](https://en.wikipedia.org/wiki/Basic_access_authentication). Add your REST API key as both the `username` and `password`.  For development, you may also pass the REST API key via the `key` query parameter. This is less secure than HTTP Basic Auth, and is not recommended for production use.  ## Quotas  Our services have a general quota of 4000 requests per minute. Should you hit the maximum requests per minute, you will need to wait 60 seconds before you can send another request. 
 *
 * The version of the OpenAPI document: v3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import WorkflowStageAssignment from './WorkflowStageAssignment';

/**
 * The LanguagePair model module.
 * @module model/LanguagePair
 * @version v3.0
 */
class LanguagePair {
    /**
     * Constructs a new <code>LanguagePair</code>.
     * A language pair couples the source and target language along with memory and pre-translations settings associated to a project. 
     * @alias module:model/LanguagePair
     * @param trgLang {String} Target language, an ISO 639-1 language identifier.
     * @param memoryId {Number} A unique number identifying the associated Memory.
     */
    constructor(trgLang, memoryId) { 
        
        LanguagePair.initialize(this, trgLang, memoryId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, trgLang, memoryId) { 
        obj['trgLang'] = trgLang;
        obj['memoryId'] = memoryId;
    }

    /**
     * Constructs a <code>LanguagePair</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LanguagePair} obj Optional instance to populate.
     * @return {module:model/LanguagePair} The populated <code>LanguagePair</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LanguagePair();

            if (data.hasOwnProperty('trgLang')) {
                obj['trgLang'] = ApiClient.convertToType(data['trgLang'], 'String');
            }
            if (data.hasOwnProperty('trgLocale')) {
                obj['trgLocale'] = ApiClient.convertToType(data['trgLocale'], 'String');
            }
            if (data.hasOwnProperty('dueDate')) {
                obj['dueDate'] = ApiClient.convertToType(data['dueDate'], 'String');
            }
            if (data.hasOwnProperty('memoryId')) {
                obj['memoryId'] = ApiClient.convertToType(data['memoryId'], 'Number');
            }
            if (data.hasOwnProperty('externalModelId')) {
                obj['externalModelId'] = ApiClient.convertToType(data['externalModelId'], 'Number');
            }
            if (data.hasOwnProperty('pretranslate')) {
                obj['pretranslate'] = ApiClient.convertToType(data['pretranslate'], 'Boolean');
            }
            if (data.hasOwnProperty('autoAccept')) {
                obj['autoAccept'] = ApiClient.convertToType(data['autoAccept'], 'Boolean');
            }
            if (data.hasOwnProperty('caseSensitive')) {
                obj['caseSensitive'] = ApiClient.convertToType(data['caseSensitive'], 'Boolean');
            }
            if (data.hasOwnProperty('takeMatchAttribution')) {
                obj['takeMatchAttribution'] = ApiClient.convertToType(data['takeMatchAttribution'], 'Boolean');
            }
            if (data.hasOwnProperty('configId')) {
                obj['configId'] = ApiClient.convertToType(data['configId'], 'Number');
            }
            if (data.hasOwnProperty('workflowTemplateId')) {
                obj['workflowTemplateId'] = ApiClient.convertToType(data['workflowTemplateId'], 'Number');
            }
            if (data.hasOwnProperty('workflowTemplateName')) {
                obj['workflowTemplateName'] = ApiClient.convertToType(data['workflowTemplateName'], 'Number');
            }
            if (data.hasOwnProperty('workflowStageAssignments')) {
                obj['workflowStageAssignments'] = ApiClient.convertToType(data['workflowStageAssignments'], [WorkflowStageAssignment]);
            }
        }
        return obj;
    }


}

/**
 * Target language, an ISO 639-1 language identifier.
 * @member {String} trgLang
 */
LanguagePair.prototype['trgLang'] = undefined;

/**
 * A locale identifier, supported for target language.
 * @member {String} trgLocale
 */
LanguagePair.prototype['trgLocale'] = undefined;

/**
 * An ISO date.
 * @member {String} dueDate
 */
LanguagePair.prototype['dueDate'] = undefined;

/**
 * A unique number identifying the associated Memory.
 * @member {Number} memoryId
 */
LanguagePair.prototype['memoryId'] = undefined;

/**
 * A unique identifier for working with a third party model in the Lilt Platform
 * @member {Number} externalModelId
 */
LanguagePair.prototype['externalModelId'] = undefined;

/**
 * Attribute translation authorship of exact matches to the creator of the document being pretranslated.
 * @member {Boolean} pretranslate
 */
LanguagePair.prototype['pretranslate'] = undefined;

/**
 * Accept and lock exact matches.
 * @member {Boolean} autoAccept
 */
LanguagePair.prototype['autoAccept'] = undefined;

/**
 * Use case sensitive translation memory matching.
 * @member {Boolean} caseSensitive
 */
LanguagePair.prototype['caseSensitive'] = undefined;

/**
 * Use MT for unmatched segments.
 * @member {Boolean} takeMatchAttribution
 */
LanguagePair.prototype['takeMatchAttribution'] = undefined;

/**
 * Configuration id
 * @member {Number} configId
 */
LanguagePair.prototype['configId'] = undefined;

/**
 * Workflow Template id, to assign a specific Workflow to the project created out of this Language Pair. WorkflowTemplateIds can be retrieved via the /workflows/templates endpoint. If not specified then the Job level workflowTemplateId will be used.
 * @member {Number} workflowTemplateId
 */
LanguagePair.prototype['workflowTemplateId'] = undefined;

/**
 * Workflow Template Name, when passed with TeamId it allows for an on the fly look up of the correct WorkflowTemplate to use. If workflowTemplateId is passed the workflowTemplateId supercedes other lookups.
 * @member {Number} workflowTemplateName
 */
LanguagePair.prototype['workflowTemplateName'] = undefined;

/**
 * @member {Array.<module:model/WorkflowStageAssignment>} workflowStageAssignments
 */
LanguagePair.prototype['workflowStageAssignments'] = undefined;






export default LanguagePair;

