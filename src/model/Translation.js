/**
 * Lilt REST API
 * The Lilt REST API enables programmatic access to the full-range of Lilt backend services including:   * Training of and translating with interactive, adaptive machine translation   * Large-scale translation memory   * The Lexicon (a large-scale termbase)   * Programmatic control of the Lilt CAT environment   * Translation memory synchronization  Requests and responses are in JSON format. The REST API only responds to HTTPS / SSL requests. ## Authentication Requests are authenticated via REST API key, which requires the Business plan.  Requests are authenticated using [HTTP Basic Auth](https://en.wikipedia.org/wiki/Basic_access_authentication). Add your REST API key as both the `username` and `password`.  For development, you may also pass the REST API key via the `key` query parameter. This is less secure than HTTP Basic Auth, and is not recommended for production use. 
 *
 * The version of the OpenAPI document: v2.0
 * Contact: support@lilt.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Translation model module.
 * @module model/Translation
 * @version 0.5.0
 */
class Translation {
    /**
     * Constructs a new <code>Translation</code>.
     * A machine translation (MT) or a translation memory (TM) match of a source segment.
     * @alias module:model/Translation
     */
    constructor() { 
        
        Translation.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Translation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Translation} obj Optional instance to populate.
     * @return {module:model/Translation} The populated <code>Translation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Translation();

            if (data.hasOwnProperty('target')) {
                obj['target'] = ApiClient.convertToType(data['target'], 'String');
            }
            if (data.hasOwnProperty('targetWithTags')) {
                obj['targetWithTags'] = ApiClient.convertToType(data['targetWithTags'], 'String');
            }
            if (data.hasOwnProperty('align')) {
                obj['align'] = ApiClient.convertToType(data['align'], 'String');
            }
            if (data.hasOwnProperty('provenance')) {
                obj['provenance'] = ApiClient.convertToType(data['provenance'], 'String');
            }
            if (data.hasOwnProperty('score')) {
                obj['score'] = ApiClient.convertToType(data['score'], 'Number');
            }
            if (data.hasOwnProperty('isTMMatch')) {
                obj['isTMMatch'] = ApiClient.convertToType(data['isTMMatch'], 'Boolean');
            }
            if (data.hasOwnProperty('targetDelimiters')) {
                obj['targetDelimiters'] = ApiClient.convertToType(data['targetDelimiters'], ['String']);
            }
            if (data.hasOwnProperty('targetWords')) {
                obj['targetWords'] = ApiClient.convertToType(data['targetWords'], ['String']);
            }
        }
        return obj;
    }


}

/**
 * The target string.
 * @member {String} target
 */
Translation.prototype['target'] = undefined;

/**
 * The target string with source tags projected into the target.
 * @member {String} targetWithTags
 */
Translation.prototype['targetWithTags'] = undefined;

/**
 * \"MT only: A whitespace delimited list of source-target alignment indices.\" 
 * @member {String} align
 */
Translation.prototype['align'] = undefined;

/**
 * Positive values indicate that the word is from the Memory, with contiguous identical entries (e.g., 2 2) indicating phrase matches. Negative contiguous values indicate entries from the Lexicon. 0 indicates a word from the background data. 
 * @member {String} provenance
 */
Translation.prototype['provenance'] = undefined;

/**
 * The score of the translation.
 * @member {Number} score
 */
Translation.prototype['score'] = undefined;

/**
 * TM only: If true, indicates an exact translation memory match.
 * @member {Boolean} isTMMatch
 */
Translation.prototype['isTMMatch'] = undefined;

/**
 * A format string that indicates, for each word, if the word should be preceded by a space.
 * @member {Array.<String>} targetDelimiters
 */
Translation.prototype['targetDelimiters'] = undefined;

/**
 * The target string can be constructed by suffixing each `targetDelimiters` entry with its corresponding word in `targetWords` and concatenating the constructed array. Please note that the `targetDelimiters` array has one more entry than `targetWords` array which is why the last entry in the array will be the last value of `targetDelimiters`. 
 * @member {Array.<String>} targetWords
 */
Translation.prototype['targetWords'] = undefined;






export default Translation;

