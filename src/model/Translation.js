/**
 * Lilt REST API
 * The Lilt REST API enables programmatic access to the full-range of Lilt backend services including:   * Training of and translating with interactive, adaptive machine translation   * Large-scale translation memory   * The Lexicon (a large-scale termbase)   * Programmatic control of the Lilt CAT environment   * Translation memory synchronization  Requests and responses are in JSON format. The REST API only responds to HTTPS / SSL requests. ## Authentication Requests are authenticated via REST API key, which requires the Business plan.  Requests are authenticated using [HTTP Basic Auth](https://en.wikipedia.org/wiki/Basic_access_authentication). Add your REST API key as both the `username` and `password`.  For development, you may also pass the REST API key via the `key` query parameter. This is less secure than HTTP Basic Auth, and is not recommended for production use. 
 *
 * OpenAPI spec version: v2.0
 * Contact: support@lilt.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BigDecimal from './BigDecimal';

/**
* The Translation model module.
* @module model/Translation
* @version v2.0
*/
export default class Translation {
    /**
    * Constructs a new <code>Translation</code>.
    * A machine translation (MT) or a translation memory (TM) match of a source segment.
    * @alias module:model/Translation
    * @class
    */

    constructor() {
        
        
        
    }

    /**
    * Constructs a <code>Translation</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/Translation} obj Optional instance to populate.
    * @return {module:model/Translation} The populated <code>Translation</code> instance.
    */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Translation();
                        
            
            if (data.hasOwnProperty('target')) {
                obj['target'] = ApiClient.convertToType(data['target'], 'String');
            }
            if (data.hasOwnProperty('targetWithTags')) {
                obj['targetWithTags'] = ApiClient.convertToType(data['targetWithTags'], 'String');
            }
            if (data.hasOwnProperty('align')) {
                obj['align'] = ApiClient.convertToType(data['align'], 'String');
            }
            if (data.hasOwnProperty('provenance')) {
                obj['provenance'] = ApiClient.convertToType(data['provenance'], 'String');
            }
            if (data.hasOwnProperty('score')) {
                obj['score'] = ApiClient.convertToType(data['score'], BigDecimal);
            }
            if (data.hasOwnProperty('isTMMatch')) {
                obj['isTMMatch'] = ApiClient.convertToType(data['isTMMatch'], 'Boolean');
            }
            if (data.hasOwnProperty('targetDelimiters')) {
                obj['targetDelimiters'] = ApiClient.convertToType(data['targetDelimiters'], ['String']);
            }
            if (data.hasOwnProperty('targetWords')) {
                obj['targetWords'] = ApiClient.convertToType(data['targetWords'], ['String']);
            }
        }
        return obj;
    }

    /**
    * The target string.
    * @member {String} target
    */
    target = undefined;
    /**
    * The target string with source tags projected into the target.
    * @member {String} targetWithTags
    */
    targetWithTags = undefined;
    /**
    * \"MT only: A whitespace delimited list of source-target alignment indices.\" 
    * @member {String} align
    */
    align = undefined;
    /**
    * Positive values indicate that the word is from the Memory, with contiguous identical entries (e.g., 2 2) indicating phrase matches. Negative contiguous values indicate entries from the Lexicon. 0 indicates a word from the background data. 
    * @member {String} provenance
    */
    provenance = undefined;
    /**
    * The score of the translation.
    * @member {module:model/BigDecimal} score
    */
    score = undefined;
    /**
    * TM only: If true, indicates an exact translation memory match.
    * @member {Boolean} isTMMatch
    */
    isTMMatch = undefined;
    /**
    * A format string that indicates, for each word, if the word should be preceded by a space.
    * @member {Array.<String>} targetDelimiters
    */
    targetDelimiters = undefined;
    /**
    * A list of target words corresponding with the same dimension as  `targetDelimiters`. The target string can be constructed by prefixing each word with its corresponding value in `targetDelimiters`, and then concatenating the words. 
    * @member {Array.<String>} targetWords
    */
    targetWords = undefined;




}
